

2. Architektur
	2.1 Vorherige Arbeit
	2.2 Erweiterbarkeit um weitere Datenstruktur (am Beispiel von Bäumen)
	2.3 Erweiterung der Architektur
	2.4 Zusammenfassung



Kapitel


[ ] 2 Architektur


[ ] 2.1 Vorherige Arbeit
	
	Beachtet sei, dass der Fokus dieser Arbeit auf der Beleuchtung der Erweiterungen liegt und daher die Anwendung "Algorithm Visual Studio" selbst nicht groß erläutert wird. Dies wurde bereits in PLATZHALTER \todo{Quellenverweis auf die andere BA} getan. Um die grundlegenden Abläufe und die Architektur zu verstehen, sollte daher die genannte Arbeit betrachtet werden. 
	Allerdings ist es sinnvoll die grundlegende Art, wie Datenstrukturen im Programm vorliegen, noch einmal zu beleuchten:
		- Für jede zu Datenstruktur muss eine Klasse existieren, die vom Nutzer aufgerufen und genutzt werden kann. Dabei werden die Elemente und Werte der Datenstruktur nicht direkt in der vom Nutzer bedienten Klasse gespeichert, sondern die Klasse speichert eine sogenannte "Info-Datenstruktur". Die "Info-Datenstruktur" ist dafür da die Datenstruktur abzuspeichern und die je Befehl passenden Visualisierungen aufzurufen. Dabei wird zunächst der Datenstruktur-ändernde Befehl dieser ausgeführt und danach die Visualisierung aufgerufen.


[ ] 2.2 Erweiterbarkeit um weitere Datenstruktur
	{Beim Teil der abzuändernden Dateien auch noch Beispielcode aus den beiden Dateien einfügen? Wär nicht viel im Vergleich zum Beispielcode einer ganzen Datenstruktur...}
	
	%// Allgemein
	Um aufzuzeigen, wie eine weitere Datenstruktur grundsätzlich hinzuzufügen ist, wird nachfolgend zuerst erläutert, welche Dateien erstellt werden sollten und welche Dateien angepasst werden müssen und daraufhin warum das alles so ist. Das wird am Beispiel der Bäume aufgezeigt, die im Rahmen dieser Arbeit hinzugefügt wurden. Dabei wurden die bereits vorhandenen Namenskonventionen für die Dateien beibehalten. Die später beschriebenen Abbildungen 1, 2, 3 und 4 PLATZHALTER \todo{Verweis auf all die UML-Klassendiagramme} sind Ausschnitte aus dem UML-Klassendiagramm PLATZHALTER \todo{Verweis auf Anhang ganzes UML-Klassendiagramm}. In diesem Diagramm sind alle Klassen, Methoden und Attribute, die für eine Datenstruktur neu hinzugefügt werden müssen, in grün dargestellt. Methoden, deren Inhalt geändert werden muss, sind blau. Insgesamt wurde nicht das ganze Programm dargestellt und einige Attribute und Methoden mit "..." abgekürzt, da dies die Lesbarkeit stören würde und die gekürzten Sachen Funktionen und Attribute sind, die in PLATZHALTER \todo{Quellenverweis auf BA UML} bereits gezeigt werden und nicht von den Änderungen betroffen waren. Alle an diesem Beispiel aufgezeigten Abhängigkeiten und Funktionen müssen bei einer neuen Datenstruktur implementiert werden. 
	
	%// Hinzuzufügende Dateien
	Folgende Dateien wurden erstellt:
			datastructures.Tree, 
			datastructures.InfoTree, 
			builders.TreeBuilder,
			commands.treeCommands.TreeCommand, 
			visualization.TreeVisualization			
	Zu beachten ist hierbei, dass für jeden grundlegenden Befehl der Datenstruktur eine eigene Klasse, die von "TreeCommand" erbt, im Ordner "commands.treeCommands" erstellt werden muss. So wurde noch u.a. "commands.treeCommands.ChangeValue" und "commands.treeCommands.DeleteLeaf" hinzugefügt. 
	Für jeden auswählbaren Algorithmus muss eine Klasse in "Algorithms" hinzugefügt werden. Im Fall der Bäume ist das u.a. "Algorithms.TreeDemo" und "Algorithms.TreeSimple". 
	Zudem war es bei Bäumen nötig, diese an sich zu implementieren. Das ist mit MyTree und MyNode geschehen. 
	
	%// Abzuändernde Dateien
	Was der Wartbarkeit des Programms sehr zugute kommt ist, dass beim Hinzufügen einer Datenstruktur nur zwei bereits existierende Dateien, zudem nur in geringem Maße, tatsächlich abgeändert werden müssen. Diese beiden Dateien sind:
		abstractAlgorithm.AbstractAlgorithm
		model.ParentViewModel
	So ist in "AbstractAlgorithm" ein Attribut und eine Methode hinzuzufügen. Das Attribut ist der Builder, der bereits als "builders.TreeBuilder" erstellt wurde. Dieses Attribut wird in der hinzuzufügenden Methode "create_Tree" verwendet. 
	"ParentViewModel" muss um ein Attribut und zwei Methoden erweitert werden. Das hinzuzufügende Attribut ist die als "visualization.TreeVisualization" abgespeicherte Klasse zur Visualisierung. Bei den zu erweiternden Methoden sind nur wenige Zeilen Programmcode erforderlich. So muss "exeCommand" zusätzlich den Fall "TreeCommand" abdecken und "resetVisualization" auch die als Attribut abgespeicherte Visualisierung für Tree zurücksetzen.

	%// Warum was gemacht wurde
	%// #1 Builder
	Jede hinzugefügte Algorithmus-Klasse erbt von AbstractAlgorithm PLATZHALTER \todo{Verweis auf UML Ausschnitt #1}. Dank diesem Erben, kann jeder Algorithmus mit der jeweiligen "create" Funktion auf alle Builder zurückgreifen. Im gezeigten Fall kann mit "create_Tree" eine Instanz von Tree und InfoTree erzeugt werden. Diese Struktur ist das Erbauer-Entwurfsmuster bzw. Builder-Pattern, wie in PLATZHALTER \todo{Quellenverweis auf BA wo Builder-Pattern gezeigt wird (S.28 (36))} gezeigt wird.
	%// #3 Command
	Alle Commands erben von der abstrakten Klasse TreeCommand, die bereits von Command erbt PLATZHALTER \todo{Verweis auf UML Ausschnitt #3}. Beispielhaft sind hier ChangeValue und DeleteLeaf abgebildet. Insbesondere die Befehle exeCommand und backCommand sind hier wichtig. exeCommand führt den normalen Befehl aus, backCommand führt die nötigen Schritte aus um den jeweiligen Befehl rückgängig zu machen. Hier wurde das Befehls-Entwurfsmuster bzw. Command-Pattern verwendet, wie auch in PLATZHALTER \todo{Quellenverweis auf BA wo Command-Pattern gezeigt wird (S.27 (35))} aufgezeigt wird. 
	%// #2 Tree & InfoTree
	Die Klassen Tree und InfoTree sind zentrale Klassen des ganzen PLATZHALTER \todo{Verweis auf UML Ausschnitt #2}. Beide erben von AbstractDataStructure und speichern die Datenstruktur MyTree, haben aber unterschiedliche Aufgaben. Tree ist die für den User anwendbare Klasse und InfoTree kümmert sich ums management der hinterliegenden datenstruktur inklusive weiterleitung an visualisierungsklasse. Konkret läuft das, wie in PLATZHALTER \todo{Verweis auf UML Sequenz Ausschnitt #A} am Beispiel von addLeaf gezeigt. Ruft der Nutzer addLeaf auf, so leitet Tree das an InfoTree weiter. Dort werden gewisse Vorbereitungen getroffen, hier konkret das bestimmen des parents anhand des parentIndex, und dann an die pure Datenstruktur MyTree geleitet. Dort wird die Datenstruktur geändert. Daraufhin wird von InfoTree die passende Visualisierung von TreeVisualization aufgerufen.
	%// #4 Visualisierung
	Die Klasse zur Visualisierung TreeVisualization bietet für jeden ausführbaren Befehl eine passende Visualisierung PLATZHALTER \todo{Verweis auf UML Ausschnitt #4}. Sie speichert für jede dargestellte Instanz von Tree den zugehörigen InfoTree. Außerdem besteht hier auch eine Verbindung zum ExecuteAlgorithmController, um nach den getätigten Änderungen in der Visualisierungsklasse die Darstellung mit einem Aufruf von updateVisualization des ExecuteAlgorithmController's aktualisiert werden muss. 
	
	
[ ] 2.3 Erweiterung der Architektur

	Neben dem Hinzufügen der Bäume, wurde die Architektur zwangsläufig geändert um Animationen, Bewegen und Zooming reinzubekommen. Dabei kann eine Datenstruktur weiterhin wie in 2.2 PLATZHALTER \todo{Auf Kapitel verweisen} aufgezeigt hinzugefügt werden. Das einzige, was dazu kommt, ist die Möglichkeit, nicht der Zwang, eine Animationsklasse hinzuzufügen. Wie solch eine hinzuzufügen ist und wie sich die Klassen zur Bewegung und Zoomen einordnen, wird in diesem Unterkapitel beleuchtet.

	{Richtige Abbildungsbezeichnungen reinpacken}
	{Richtiger Kapitelverweis reinpacken und auch verlinken (zu dem wie man eine Datenstruktur hinzufügt}
	%// Generelles
	Um die strukturellen Erweiterungen und Änderungen der Anwendungsarchitektur übersichtlich aufzuzeigen, liegt mit \todo{Abbildung 1?} ein UML-Diagramm vor. Dieses stellt nicht das komplette Programm dar, sondern nur die neu erstellten Klassen im Bereich der Animationen, Zoomen und Bewegung. Dabei ist alles, was neu hinzugefügt wurde grün markiert und alles, was bereits zuvor vorhanden war, in schwarz. Damit einzelne Klassen nicht durch zu viele, für diese Darstellung unwichtige, Attribute und Methoden unübersichtlich werden, wurden einige dieser ausgelassen. Dies ist in den Klassen ParentViewModel, ExecuteAlgorithmController und der JavaFX-Klasse Pane der Fall. Abgesehen von der hinzugefügten Datenstruktur Baum und einer Klasse um die Config-Datei einzulesen, hat der Rest der Anwendung ein, im Vergleich zur vorigen Version, unverändertes UML-Diagramm. Auf die genannten Ausnahmen wird später eingegangen.

	{ab erster Erwähnung von "initialize" Code davon zeigen ums schöner zu haben? Oder Sequenzdiagramm?}
	%// Bewegen
	Für das Feature der Bewegung innerhalb des Anzeigefensters wurden die Klassen DragContext und NodeGestures hinzugefügt. Dabei ist DragContext nur dafür da um für den Prozess wichtige Werte abzuspeichern, während NodeGestures für das korrekte Ausführen der Bewegung verantwortlich ist. Dafür wird lediglich in initialize() von ExecuteAlgorithmController eine Instanz von NodeGestures erstellt und zum zugehörigen Anzeigefenster als Events hinzugefügt. 
	%// Zoomen
	Das Zoomen wird von ZoomPane und SceneGestures ermöglicht. ZoomPane dient dafür als sichtbares Fenster, weshalb es auch von der JavaFX-Klasse Pane erbt. Der tatsächliche Vorgang wird allerdings von der Klasse SceneGestures übernommen. Von SceneGestures wird, ähnlich wie bei NodeGestures, in der initialize-Methode von ExecuteAlgorithmController eine Instanz erstellt und zum Fenster, in dem das ZoomPane liegt, als Event hinzugefügt. 
	%// Animation
	Etwas aufwendigere Änderungen waren für die hinzuzufügenden Animationen notwendig. Für jede Datenstruktur, die Animationen bieten soll, wird eine Animationsklasse erstellt und als Attribut in der zugehörigen Visualisierungsklasse abgespeichert. Die jeweiligen Animationen werden in dieser Animationsklasse erstellt. Außerdem erbt sie von AbstractAnimationCreator, um gewisse einheitliche Methoden zu ermöglichen. 
	In 2.2 PLATZHALTER \todo{Verweis auf Kapitel} wurde der Ablauf zur Visualisierung eines Befehls anhand von PLATZHALTER \todo{Verweis auf UML Sequenz Ausschnitt #A} gezeigt. Hat eine Klasse Animationen drin, gibt es kleine Änderungen in dem Ablauf. In PLATZHALTER \todo{Verweis auf UML Sequenz komplett} ist das aktualisierte Diagramm, wobei die Änderung im Vergleich zu PLATZHALTER \todo{Verweis auf UML Sequenz Abschnitt #A} in grün dargestellt wird. Wie zu sehen ist, ist nur ein Aufruf innerhalb der Visualisierungsmethode hinzugekommen, der die Methode zur Erstellung der Animation aufruft. Die Abkapselung der Animationen von der Visualisierung, anstatt dass die Animationen auch in den Visualisierungsklassen erstellt werden, sorgt für eine bessere Lesbarkeit und Wartbarkeit des Programmcodes. 
	Eine weitere Klasse, die für die Animationen hinzugefügt wird ist TransitionChain, welche für leichtere Verwaltung mehrerer Animationen sorgt. Jedes mal wenn eine Animation erstellt wird, wird sie zu TransitionChain hinzugefügt. Soll nun z.B. die Visualisierung beendet werden, können alle Animationen durch einen einzigen Zugriff auf TransitionChain vorzeitig zum Animationsende springen.
	
	%// Veränderungen SequenzDiagramm Animationen
	In 2.2 PLATZHALTER \todo{Verweis auf Kapitel} wurde der Ablauf zur Visualisierung eines Befehls anhand von PLATZHALTER \todo{Verweis auf UML Sequenz Ausschnitt #A} gezeigt. Hat eine Klasse Animationen drin, gibt es kleine Änderungen in dem Ablauf. In PLATZHALTER \todo{Verweis auf UML Sequenz komplett} das aktualisierte Diagramm, wobei die Änderung im Vergleich zu PLATZHALTER \todo{Verweis auf UML Sequenz Abschnitt #A} in grün dargestellt wird. Wie zu sehen ist, ist nur ein Aufruf innerhalb der Visualisierungsmethode hinzugekommen, der die Methode zur Erstellung der Animation aufruft. Das macht deutlich, dass 


[ ] 2.4 Zusammenfassung 
	
	In diesem Kapitel wurde in 2.2 PLATZHALTER \todo{Verweis auf Kapitel} anhand von Ausschnitten aus PLATZHALTER \todo{Verweis Anhang UML-Klassendiagramm} die Erweiterung um Bäume erklärt und damit gleichzeitig aufgezeigt, wie eine andere neue Datenstruktur hinzuzufügen wäre. In 2.3 PLATZHALTER \todo{Verweis auf Kapitel} wurde daraufhin aufgezeigt, wie die Animationen, Zoomen und Bewegen hinzugefügt wurden. Außerdem wurde anhand eines Sequenzdiagramms PLATZHALTER \todo{Verweis auf Sequenzdia} aufgezeigt, was für ein Unterschied in der Visualisierung zwischen dem Ablaufen ohne und mit Animation liegt.
