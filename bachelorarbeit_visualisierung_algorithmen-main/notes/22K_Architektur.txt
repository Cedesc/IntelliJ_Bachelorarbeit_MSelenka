

2. Architektur
	2.1 Vorherige Arbeit
	2.2 Erweiterbarkeit um weitere Datenstruktur (am Beispiel von Bäumen)
	2.3 Erweiterung der Architektur
	2.4 Zusammenfassung



Kapitel


[X] 2 Architektur

	In diesem Kapitel wird die Architektur der Anwendung aufgezeigt. Dabei wird einerseits am Beispiel von Bäumen gezeigt wie die Anwendung um neue Datenstrukturen erweiterbar ist, andererseits was an der Architektur beim Implementieren der Erweiterungen geändert wurde.


[X] 2.1 Vorherige Arbeit
	
	Beachtet sei, dass der Fokus dieser Arbeit auf der Beleuchtung der Erweiterungen liegt und daher die Anwendung "Algorithm Visual Studio" \todo{Anführungszeichen richtig setzen} selbst weitestgehend nicht erläutert wird. Dies wurde bereits in PLATZHALTER \todo{Quellenverweis auf die andere BA} von Manuel Selenka getan. Um die grundlegenden Abläufe und die Architektur zu verstehen, sollte daher die vorherige Arbeit betrachtet werden. 
	
	Allerdings ist es sinnvoll die grundlegende Art, wie Datenstrukturen im Programm vorliegen, noch einmal zusammenzufassen:
	Für jede Datenstruktur muss eine Klasse existieren, die vom Nutzer aufgerufen und genutzt werden kann. Dabei existiert eine weitere Klasse im Hintergrund, die von erstgenannter abgespeichert wird. Diese im Hintergrund liegende Klasse ist die sogenannte "Info-Datenstruktur" PLATZHALTER \todo{Anführungszeichen richtig setzen oder kursiv machen}. Die "Info-Datenstruktur" PLATZHALTER \todo{Anführungszeichen richtig setzen oder kursiv machen} manipuliert die Datenstruktur und ruft die je Befehl passende Visualisierungen auf. Dabei wird zunächst der Datenstruktur-ändernde Befehl dieser ausgeführt und danach die Visualisierung aufgerufen.


[X] 2.2 Erweiterbarkeit um weitere Datenstruktur
	
	% // Allgemein
	Um darzustellen, wie eine weitere Datenstruktur grundsätzlich hinzuzufügen ist, wird nachfolgend zuerst aufgezählt, welche Dateien erstellt werden sollten und welche Dateien angepasst werden müssen. Daraufhin welche Zwecke die jeweiligen erstellen Klassen haben. Das wird am Beispiel der Bäume gezeigt, die im Rahmen dieser Arbeit hinzugefügt wurden. Die bereits vorhandenen Namenskonventionen für die Dateien wurden beibehalten. Die später beschriebenen Abbildungen 1, 2, 3 und 4 PLATZHALTER \todo{Verweis auf all die UML-Klassendiagramme} sind Ausschnitte aus dem UML-Klassendiagramm PLATZHALTER \todo{Verweis auf Anhang ganzes UML-Klassendiagramm}. In diesem Diagramm sind alle Klassen, Methoden und Attribute, die für eine Datenstruktur neu hinzugefügt werden müssen, in Grün dargestellt. Bestehende Methoden, deren Inhalt geändert werden muss, sind blau geschrieben. Um die Lesbarkeit zu verbessern wurde insgesamt nicht das ganze Programm dargestellt und einige Attribute und Methoden mit "..." \todo{Anführungszeichen richtig} abgekürzt. Die gekürzten Funktionen und Attribute werden in PLATZHALTER \todo{Quellenverweis auf BA UML} bereits gezeigt und waren nicht von den Änderungen betroffen.
	Alle an diesem Beispiel aufgezeigten Abhängigkeiten und Funktionen müssen bei einer neuen Datenstruktur implementiert werden. 
	
	% // Hinzuzufügende Dateien
	Folgende Dateien wurden erstellt:
			datastructures.Tree, 
			datastructures.InfoTree, 
			builders.TreeBuilder,
			commands.treeCommands.TreeCommand, 
			visualization.TreeVisualization			
	Zu beachten ist hierbei, dass für jeden grundlegenden Befehl der Datenstruktur eine eigene Klasse, die von "TreeCommand" erbt, im Ordner "commands.treeCommands" erstellt werden muss. So wurde noch u.a. commands.treeCommands.ChangeValue \todo{kursiv oder so} und commands.treeCommands.DeleteLeaf \todo{kursiv oder so} hinzugefügt. 
	Für jeden auswählbaren Algorithmus muss eine Klasse in Algorithms \todo{kursiv oder so} hinzugefügt werden. Im Fall der Bäume ist das u.a. Algorithms.TreeDemo \todo{kursiv oder so} und Algorithms.TreeSimple \todo{kursiv oder so}. 
	Bei den implementierten Bäumen war es nötig, die Datenstruktur an sich zu implementieren. Das ist mit MyTree und MyNode geschehen.
	Es besteht zudem die Option eine Klasse für Animationen zu erstellen. Dies wird später näher beleuchtet. 
	
	% // Abzuändernde Dateien
	Was der Wartbarkeit des Programms sehr zugutekommt ist, dass beim Hinzufügen einer Datenstruktur nur zwei bereits existierende Dateien abgeändert werden müssen. Dies auch nur in geringem Maße. Diese beiden Dateien sind:
		abstractAlgorithm.AbstractAlgorithm
		model.ParentViewModel
	So ist in AbstractAlgorithm \todo{kursiv oder so} ein Attribut und eine Methode hinzuzufügen. Das Attribut ist der Builder, der bereits als builders.TreeBuilder \todo{kursiv oder so} erstellt wurde. Dieses Attribut wird in der hinzuzufügenden Methode create_Tree \todo{kursiv oder so} verwendet.
	ParentViewModel \todo{kursiv oder so} muss um ein Attribut und zwei Methoden erweitert werden. Das hinzuzufügende Attribut ist die als visualization.TreeVisualization \todo{kursiv oder so} abgespeicherte Klasse zur Visualisierung. Bei den zu erweiternden Methoden sind nur wenige Zeilen Programmcode erforderlich. So muss exeCommand \todo{kursiv oder so} zusätzlich den Fall TreeCommand \todo{kursiv oder so} abdecken und resetVisualization \todo{kursiv oder so} auch die als Attribut abgespeicherte Visualisierung für Tree zurücksetzen.

	% // Warum was gemacht wurde
	% // #1 Builder
	Jede hinzugefügte Algorithmus-Klasse erbt von AbstractAlgorithm PLATZHALTER \todo{Verweis auf UML Ausschnitt #1}. Dank des Erbens, kann jeder Algorithmus mit der jeweiligen "create"-Funktion \todo{Anführungszeichen richtig setzen} auf alle Builder zurückgreifen. Im gezeigten Fall kann mit create_Tree \todo{kursiv oder so} eine Instanz von Tree und InfoTree erzeugt werden. Diese Struktur ist das Erbauer-Entwurfsmuster bzw. Builder-Pattern, wie in PLATZHALTER \todo{Quellenverweis auf BA wo Builder-Pattern gezeigt wird (S.28 (36))} gezeigt wird.
	% // #3 Command
	Alle Commands erben von der abstrakten Klasse TreeCommand \todo{kursiv oder so}, die bereits von Command \todo{kursiv oder so} erbt PLATZHALTER \todo{Verweis auf UML Ausschnitt #3}. Beispielhaft sind hier ChangeValue \todo{kursiv oder so} und DeleteLeaf \todo{kursiv oder so} abgebildet. Insbesondere die Befehle exeCommand \todo{kursiv oder so} und backCommand \todo{kursiv oder so} sind wichtig. exeCommand \todo{kursiv oder so} führt den normalen Befehl aus, backCommand \todo{kursiv oder so} führt die nötigen Schritte aus, um den jeweiligen Befehl rückgängig zu machen. Hier wurde das Befehls-Entwurfsmuster bzw. Command-Pattern verwendet, wie auch in PLATZHALTER \todo{Quellenverweis auf BA wo Command-Pattern gezeigt wird (S.27 (35))} aufgezeigt wird.
	% // #2 Tree & InfoTree
	Die Klassen Tree \todo{kursiv oder so} und InfoTree \todo{kursiv oder so} sind zentrale Klassen des ganzen PLATZHALTER \todo{Verweis auf UML Ausschnitt #2}. Beide erben von AbstractDataStructure \todo{kursiv oder so} und speichern die Datenstruktur MyTree \todo{kursiv oder so}, haben aber unterschiedliche Aufgaben. Tree \todo{kursiv oder so} ist die für den Nutzer anwendbare Klasse. InfoTree \todo{kursiv oder so} kümmert sich um das Management der dahinter liegenden Datenstruktur inklusive der Weiterleitung an Visualisierungsklassen. Konkret läuft das, wie in PLATZHALTER \todo{Verweis auf UML Sequenz Ausschnitt #A} am Beispiel von addLeaf \todo{kursiv oder so} gezeigt. Ruft der Nutzer addLeaf \todo{kursiv oder so} auf, so leitet Tree \todo{kursiv oder so} den Befehl InfoTree \todo{kursiv oder so} weiter. Dort werden gewisse Vorbereitungen getroffen, hier konkret das Bestimmen des parents \todo{kursiv oder so} anhand des parent Index\todo{kursiv oder so}. Daraufhin wird es an MyTree \todo{kursiv oder so} geleitet, um die Datenstruktur zu ändern. Im Anschluss wird von InfoTree \todo{kursiv oder so} die passende Visualisierung von TreeVisualization \todo{kursiv oder so} aufgerufen.
	% // #4 Visualisierung
	Die Klasse zur Visualisierung TreeVisualization \todo{kursiv oder so} bietet für jeden ausführbaren Befehl eine passende Visualisierung PLATZHALTER \todo{Verweis auf UML Ausschnitt #4}. Sie speichert für jede dargestellte Instanz von Tree \todo{kursiv oder so} den zugehörigen InfoTree \todo{kursiv oder so}. Außerdem besteht eine Verbindung zum ExecuteAlgorithmController \todo{kursiv oder so}, um nach den getätigten Änderungen in der Visualisierungsklasse die Darstellung mit einem Aufruf von updateVisualization \todo{kursiv oder so} des ExecuteAlgorithmController's \todo{kursiv oder so} zu aktualisieren. 
	
	
[X] 2.3 Erweiterung der Architektur

	Neben dem Hinzufügen der Bäume, wurde die Architektur zwangsläufig geändert um Animationen, Zoomen und Bewegung einzubauen. Dabei kann eine Datenstruktur weiterhin wie in 2.2 PLATZHALTER \todo{Auf Kapitel verweisen} aufgezeigt hinzugefügt werden. Was dazu kommt ist die Möglichkeit, nicht der Zwang, eine Animationsklasse hinzuzufügen. Wie solch eine hinzuzufügen ist und wie sich die Klassen zur Bewegung und Zoomen einordnen, wird in diesem Unterkapitel beleuchtet.

	% // Generelles
	Um die strukturellen Erweiterungen und Änderungen der Anwendungsarchitektur übersichtlich aufzuzeigen, liegt mit \todo{Abbildung 1?} ein UML-Klassendiagramm vor. Dieses stellt nicht das komplette Programm dar, sondern nur die neu erstellten Klassen im Bereich der Animationen, Zoomen und Bewegung. Dabei ist alles, was neu hinzugefügt wurde, grün markiert und alles, was bereits zuvor vorhanden war, schwarz. Damit einzelne Klassen nicht durch zu viele, für diese Darstellung unwichtige, Attribute und Methoden unübersichtlich werden, wurden einige dieser ausgelassen. Dies ist in den Klassen ParentViewModel, ExecuteAlgorithmController und der JavaFX-Klasse Pane der Fall. Abgesehen von der hinzugefügten Datenstruktur Baum, hat der Rest der Anwendung ein, im Vergleich zur vorigen Version, unverändertes UML-Klassendiagramm.

	% // Zoomen
	Das Zoomen wird von ZoomPane \todo{kursiv oder so} und SceneGestures \todo{kursiv oder so} ermöglicht. ZoomPane \todo{kursiv oder so} dient dabei als sichtbares Fenster, weshalb es von der JavaFX-Klasse Pane erbt. Der tatsächliche Vorgang wird allerdings von der Klasse SceneGestures \todo{kursiv oder so} übernommen. Von SceneGestures \todo{kursiv oder so} wird in der initialize-Methode \todo{kursiv oder so} von ExecuteAlgorithmController \todo{kursiv oder so} eine Instanz erstellt und zum Fenster, in dem das ZoomPane \todo{kursiv oder so} liegt, als Event hinzugefügt. In Abbildung 1 PLATZHALTER \todo{Verweis auf Code} Zeile 3-5 PLATZHALTER \todo{Richtige Zeilen in letztlicher Abbildung??} ist dies veranschaulicht. Dabei wird das vorhandene ZoomPane \todo{kursiv oder so} (in der Abbildung als zoomPane \todo{kursiv oder so}) und das visuelle Objekt, in dem das ZoomPane \todo{kursiv oder so} liegt (in der Abbildung als parentOfZoomPane \todo{kursiv oder so}) übergeben. parentOfZoomPane \todo{kursiv oder so} muss übergeben werden, damit innerhalb der Klasse die relativen Koordinaten bestimmt werden können, um Zoomen relativ zur Maus zu ermöglichen. Nach dem Erstellen von SceneGestures \todo{kursiv oder so} wird dessen Event zu einem anderen grafischen Element hinzugefügt. In der Abbildung ist dies parentOfZoomPane \todo{kursiv oder so}. Der Zweck davon ist, das visuelle Objekt zu wählen, auf dem die Eingaben von der Maus erkannt werden sollen. 
	% // Bewegen
	Für das Feature der Bewegung innerhalb des Anzeigefensters wurden die Klassen DragContext \todo{kursiv oder so} und NodeGestures \todo{kursiv oder so} hinzugefügt. Dabei ist DragContext \todo{kursiv oder so} nur für den Zweck da, Werte abzuspeichern. NodeGestures ist für das korrekte Ausführen der Bewegung verantwortlich. Dafür wird, ähnlich wie für SceneGestures \todo{kursiv oder so}, lediglich in initialize \todo{kursiv oder so} von ExecuteAlgorithmController \todo{kursiv oder so} eine Instanz von NodeGestures \todo{kursiv oder so} erstellt und zum zugehörigen Anzeigefenster als Events hinzugefügt. In Abbildung 1 PLATZHALTER \todo{Verweis auf Code} wird das in Zeile 7-10 PLATZHALTER \todo{Richtige Zeilen in letztlicher Abbildung??} gezeigt. Der zu übergebene Parameter, hier zoomPane \todo{kursiv oder so} ist das visuelle Objekt, in dem das Bewegen möglich sein soll. Weitere Verbindungen zwischen NodeGestures \todo{kursiv oder so} und den bestehenden Klassen müssen nicht geschaffen werden. Wie bei SceneGestures \todo{kursiv oder so} werden die Events von NodeGestures \todo{kursiv oder so} zu einem grafischen Element hinzugefügt, welches die Mauseingaben empfangen soll. Im gezeigten Fall parentOfZoomPane \todo{kursiv oder so}.
	% // Animation
	Etwas aufwendigere Änderungen finden sich bei den hinzugefügten Animationen wieder. Für jede Datenstruktur, die Animationen bieten soll, wird eine Animationsklasse erstellt und als Attribut in der zugehörigen Visualisierungsklasse abgespeichert. Die jeweiligen Animationen werden in dieser Animationsklasse erstellt. Zudem erbt sie von AbstractAnimationCreator, um gewisse einheitliche Methoden zu ermöglichen. 
	In 2.2 PLATZHALTER \todo{Verweis auf Kapitel} wurde der Ablauf zur Visualisierung eines Befehls anhand von PLATZHALTER \todo{Verweis auf UML Sequenz Ausschnitt #A} gezeigt. Beinhaltet die Darstellung einer Klasse Animationen, gibt es kleine Änderungen in dem gezeigten Ablauf. In PLATZHALTER \todo{Verweis auf UML Sequenz komplett} ist das aktualisierte Diagramm abgebildet. Die Änderung im Vergleich zu PLATZHALTER \todo{Verweis auf UML Sequenz Abschnitt #A} sind grün dargestellt. Wie zu sehen ist, ist nur ein Aufruf innerhalb der Visualisierungsmethode hinzugekommen, der die Methode zur Erstellung der Animation aufruft. Die Abkapselung der Animationen von der Visualisierung, anstatt dass die Animationen auch in den Visualisierungsklassen erstellt werden, sorgt für eine bessere Lesbarkeit und Wartbarkeit des Programmcodes.
	Eine weitere Klasse, die für die Animationen hinzugefügt wird, ist TransitionChain \todo{kursiv oder so}. Diese ermöglicht eine leichtere Verwaltung mehrerer Animationen. Jedes Mal, wenn eine Animation erstellt wird, wird sie zu TransitionChain \todo{kursiv oder so} hinzugefügt. Soll nun z.B. die Visualisierung beendet werden, können alle Animationen durch einen einzigen Zugriff auf TransitionChain \todo{kursiv oder so} vorzeitig zum Animationsende springen.


[X] 2.4 Zusammenfassung 
	
	In diesem Kapitel wurde in 2.2 PLATZHALTER \todo{Verweis auf Kapitel} anhand von Ausschnitten aus PLATZHALTER \todo{Verweis Anhang UML-Klassendiagramm} die Erweiterung um Bäume erklärt und damit gleichzeitig erläutert, wie eine neue Datenstruktur in das Programm einzugliedern ist. In 2.3 PLATZHALTER \todo{Verweis auf Kapitel} wurde daraufhin aufgezeigt, wie die Animationen, Zoomen und Bewegung hinzugefügt wurden. Außerdem wurden, anhand eines Sequenzdiagramms PLATZHALTER \todo{Verweis auf Sequenzdia}, die Unterschiede zwischen dem Visualisierungsablauf ohne und mit Animationen dargestellt.







\todo{write caption and label}
\begin{lstlisting}[language=Java, caption={}\label{Abbildung 1}]
	@Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // create SceneGestures and add its event
        SceneGestures sceneGestures = new SceneGestures(zoomPane, parentOfZoomPane);
        parentOfZoomPane.addEventFilter(ScrollEvent.ANY, sceneGestures.getOnScrollEventHandler());
		
        // create NodeGestures and add its events
        NodeGestures nodeGestures = new NodeGestures(zoomPane);
        parentOfZoomPane.addEventFilter(MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        parentOfZoomPane.addEventFilter(MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());
    }
\end{lstlisting}
