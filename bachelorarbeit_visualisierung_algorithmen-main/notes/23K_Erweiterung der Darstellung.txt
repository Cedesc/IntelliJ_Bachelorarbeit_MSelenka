

5 Erweiterung der Darstellung 20 (5)
		5.1 Animationen an den bestehenden Datenstrukturen 20 (4)
			5.1.1 Variablen
			5.1.2 Array
			5.1.3 Liste
		5.2 Zoomen & Bewegen 24 (1) mehr



Was ich reinbringen kann:
	- bei deletions probleme (noch nicht hinschreiben?)


Kapitel:

5.1 Animationen an den bestehenden Datenstrukturen
	{auf die Ordnerstruktur bezogen auf die Animationen eingehen und schreiben wo die erstellt und ausgeführt werden}
	{bei schnellen eingaben, springt das programm zum ende}
	
	Animationen sind nicht nur ein nettes Gimmick, sondern sie können ungemein zur Verständlichkeit eines Ablaufs beitragen. Denn im Vergleich zum unmittelbaren Auftauchen oder Verschwinden eines Elements, kann der Nutzer bei bspw. einer kurzen Fade-in oder Fade-out Animation das betroffene Element viel schneller identifizieren, da dieses sich durch seine Bewegung vom Rest der Elemente abhebt. Es gibt auch Operationen, bei denen man ohne eine Animation nur sehr schwierig ausmachen kann, was passiert. So zum Beispiel die "insert" oder "delete" Operation der Arraylists, auf die später näher eingegangen wird. In solchen Fällen haben schon kleine Animationen sehr große Wirkung.
	Jedoch kann es sehr umständlich sein gut funktionierende Animationen zu implementieren. Wie geht man zum Beispiel mit Nutzereingaben um, wenn bisherige Animationen noch nicht abgeschlossen sind? Und ist es für das Programm notwendig zu wissen, wann eine Animation abgeschlossen ist? Wenn ja, wie setzt man dies um? Das sind beispielsweise Fragen, die man im Kopf behalten sollte, möchte man Animationen implementieren. Macht man sich darüber keine Gedanken, so kann es leicht passieren, dass Elemente an Positionen landen, an denen sie nichts zu suchen haben oder dass Animationen zu unsinnigen Zeitpunkten abgespielt werden.
	


5.1.2 Arraylists
	{auf Art der Animationen eingehen, also zb warum ich mich für reinfaden bei insert etc entschieden hab}
	{Animation ist besonders praktisch beim swap und beim inserten oder deleten mitten im array}
	{problem beispiel "swap": 
		1. A und B werden im tatsächlichen Wert getauscht 
		2. A und B werden in der Visualisierung direkt getauscht durch instant translationen
		3. A und B werden mit Animation an den richtigen Platz geschoben}


5.2 Zoomen & Bewegen
	{Zoomen nötig um übersicht zu halten, wenn die Strukturen sehr groß werden}
	{Wenn Zoomen möglich ist, sollte man sich auch rumbewegen können}
	{Zoomen möglich relativ zur Mausposition}
	{wie Zoomen und rumbewegen umgesetzt wurde - von stackoverflow; erklären was ich geändert hab}
	{Zoomen und Bewegen haben keinerlei Reibungspunkte mit Animationen, sind komplett unabhängig voneinander, sodass da keine Fehler entstehen, wenn es gleichzeitig ausgeführt wird}
