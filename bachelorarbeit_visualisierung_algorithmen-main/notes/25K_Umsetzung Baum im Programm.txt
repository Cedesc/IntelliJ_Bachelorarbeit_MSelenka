

5 Umsetzung Baum im Programm 
			- Umsetzung der Bäume
	5.1 Problematik 
	5.2 Visualisierungsalgorithmus
	5.3 Implementierung
	5.4 Erweiterbarkeit um Baum-Unterarten
	5.5 Zusammenfassung



Was ich reinbringen kann:





Kapitel:


[ ] 5
	{"Auch hier wurde, so wie im vorigen Abschnitt versucht möglichst am Vorgänger anzuknüpfen, sodass der Code kohärent erscheint, allerdings hat dies bei der visualisierungs so nicht geklappt..."}
	{Wie Bäume als Datenstruktur in der Architektur hinzugefügt wurden, wird in 2.1 Erweiterbarkeit um weitere Datenstruktur erläutert}


[ ] 5.1 Problematik
	{Kein eigenes Unterkapitel, sondern vor "5.2 Visualisierungsalgorithmus" klatschen?}
	{sequenzdiagramme zum erklären der alten und der neuen methode?}

	// Wie es bisher gemacht wurde
	In den Klassen zur Visualisierung der Datenstrukturen Array, Liste und Variable wird mit "layoutXY", wobei XY hier für eine der vorhandenen Datenstrukturen steht, die derzeit gezeigten visuellen Darstellungen der Instanzen einer Datenstruktur abgespeichert. Soll nun bspw. ein Element hinzugefügt werden, muss dies zweimal passieren: Zunächst wird es in der Info-Datenstruktur \todo{Auf Definition verweisen} hinzugefügt und danach wird der zugehörige Index in "layoutXY", heißt der visuellen Darstellung, gesucht, das Element dort eingefügt und nachfolgende Elemente ggf. um einen Index nach hinten verschoben. Eine Alternative zu diesem Vorgehen wäre eine Methode, die einheitlich eine visuelle Darstellung einer Datenstruktur von Grund auf neu erstellt. Der Vorteil der erstgennanten Methode gegenüber dieser Alternative ist, dass nur die visualisierten Teile, die sich tatsächlich ändern, betrachtet werden. Was allerdings als großer Nachteil festgehalten werden kann, ist die deutlich erhöhte Menge an Code, der für die individuellen Befehle zum korrekten Visualisieren benötigt wird. Dies ist nötig, da jeder Befehl, wie bereits zuvor erklärt, auch jedes mal auf "layoutXY" angewandt werden muss. Je mehr individueller Code pro Befehl geschrieben werden muss, desto wahrscheinlicher können Fehler auftreten und desto schlechter ist die Erweiterbarkeit der Klasse. 
	
	// Warum das bei Bäumen kacke ist
	Bei den nun hinzugefügten Bäumen ist dieser Nachteil deutlich schwerwiegender. Werden einzelne Elemente hinzugefügt oder gelöscht, muss oft ein großer Teil, wenn nicht sogar der komplette Baum, etwas verschoben werden, damit die visuelle Darstellung weiterhin einheitlich und natürlich aussieht und es nicht zu grafischen Fehlern, wie Überlappungen der Elemente, kommen kann. Auf der anderen Seite ist der genannte Vorteil bei den Bäumen nur bedingt vorhanden, da, wie beschrieben, bei den meisten Operationen ein großer Teil vom Baum betroffen ist. Insgesamt führt dies dazu, dass eine Methode, die mit einheitlichem Vorgehen den kompletten Baum als visuelle Darstellung neu erstellt, deutlich sinnvoller erscheint. Selbst wenn die Methode alleine nicht wenig Codezeilen benötigt, reduziert sich so im gesamten die Anzahl der Zeilen erheblich, da die meisten individuellen Visualisierungsbefehle nur aus dieser einheitlichen Methode bestehen. Insbesondere die Erweiterbarkeit des Programmcodes profitiert davon.
	

[ ] 5.2 Visualisierungsalgorithmus
	{Ebenen und Knotennamen in die Grafiken zeichnen?}
	{code einfügen?? denk eher nicht}

	// Intuitive Ansätze
	Während die visuelle Darstellung eines Arrays sehr intuitiv umgesetzt werden kann, da die Elemente auf einer Ebene mit festen Abständen zueinander gelegen sein können, ist dies bei einem Baum nicht so offensichtlich. Intuitive Ansätze wären einen Baum schlicht von oben oder von unten zu zeichnen. Soll von oben begonnen werden, fehlt bereits bei der Wurzel jeglicher Anhaltspunkt, wo diese auf der horizontalen Achse gut platzierbar sei. Wenn andersrum vorgegangen werden soll, bedeutet es sollen zuerst alle Knoten der untersten Ebene gesetzt werden, so wäre dies eine gute Methode, wenn alle oder beinahe alle Blätter auf der untersten Ebene lägen, ansonsten besteht jedoch ein ähnliches Problem. Da wir für allgemeine Bäume nicht von einem solchen Spezialfall ausgehen können, muss ein anderes Vorgehen entworfen werden. Das letztlich entworfene und verwendete Vorgehen wird nachfolgend behandelt. 
	
	// Wie die Positionen der Knoten bestimmt werden
	Die Funktion zur Berechnung der Positionen der Knoten geht folgendermaßen vor:
		1. Alle Blätter des Baums auf unterster Ebene mit vorgegebenem Abstand platzieren.
		2. Alle Knoten der nächsthöheren Ebene betrachten und wie folgt verfahren:
			2a. Ist der Knoten ein Blatt, so setze seine y-Koordinate auf die y-Koordinate der derzeitigen Ebene. Die x-Koordinate stimmt bereits, da das Blatt zunächst auf unterster Ebene platziert wurde.
			2b. Ist der Knoten kein Blatt, so bestimme sein mittleres Kind und setze seine x-Koordinate auf die des mittleren Kinds. Hat der Knoten eine gerade Anzahl an Kindern, so gibt es zwei mittlere Kinder und stattdessen wird das Mittel der x-Koordinaten dieser beiden genommen.
		3. Wiederhole Schritt 2 bis alle Ebenen abgearbeitet wurden.
	Zu beachten ist, dass hiermit nicht die für den Nutzer sichtbare Visualisierung gemeint ist, sondern das Berechnen der Positionen der Knoten, welches vor jedem Zeichnen des Baums ausgeführt wird. \todo{Diesen Satz als Fußnote??}
	
	// Anhand von Grafiken ausführen
	\todo{Grafiken einfügen und die Beschriftungen richtig setzen}
	Unter "TreeDemo.java" ist in der Anwendung ein Baum zu finden, welcher nun als Beispiel betrachtet wird um den vorangegangenen Algorithmus veranschaulichen zu können. Angenommen es liege dieser Baum \todo{Abbildung 1 "4 tree positioning drawn"} im Programm vor und die Knoten hätten noch keine zugewiesenen Koordinaten. Wenn nun der Algorithmus zum Positionieren der Knoten aufgerufen wird, wäre nach dem oben beschriebenen ersten Schritt das Zwischenergebnis \todo{Abbildung 2 "4 tree positioning drawn"}, \todo{folgenden Halbsatz als Fußnote??} vorausgesetzt man visualisierte die Knoten an dieser Stelle. Alle Blätter des Baums wurden auf der untersten Ebene platziert. Wird daraufhin der zweite Schritt ausgeführt, werden, wie in \todo{Abbildung 3 "4 tree positioning drawn"} erkennbar, die Positionen der Blätter 5, 7 und 10 aktualisiert und die Knoten 6, 8 und 9 genau über ihrem jeweils einzigen Kind platziert. Als nächstes wiederholt sich Schritt zwei, weshalb die zweite Ebene betrachtet und damit auch die Position von Blatt 4 aktualisiert wird. Weiterhin werden Knoten 1, 2 und 3 eingefügt. Während Knoten 3 nur ein Kind hat und deswegen genau über eben diesem platziert wird, ist das bei Knoten 1 und 2 anders. Knoten 1 wird genau über dem mittleren Kind, also Knoten 6 platziert. Die Positionen der Knoten 5 und 7 werden nicht in die Berechnung mit einbezogen. Knoten 2 hat zwei mittlere Kinder, wodurch die x-Koordinate von Knoten 2 genau zwischen diesen platziert wird. Im dritten und damit auch letzten Aufruf von Schritt zwei wird die erste Ebene betrachtet und der Wurzelknoten hinzugefügt (\todo{Abbildung 4 "4 tree positioning drawn"}). Da dieser eine gerade Anzahl an Kindknoten hat, werden nur die mittleren beiden, Knoten 2 und 3, betrachtet, um die x-Koordinate der Wurzel zu berechnen. 


[ ] 5.3 Implementierung
	{Konkrete Befehle, die der Nutzer nun aufrufen kann, nennen}
	
	// Atomare Funktionen
	Die in \todo{richtiges Kapitel} Kapitel 3.2 aufgezählten vier atomaren Funktionen (Hinzufügen eines Blatts, Löschen eines Blatts, Elternknoten eines Knotens ändern, Wert eines Knotens ändern) wurden als Methoden implementiert. Diese Methoden können alle hier relevanten Funktionsweisen nachbilden. Genauer aufgezeigt ist dies im zuvor bereits genannten Kapitel \todo{richtiges Kapitel} 3.2. In der Anwendung selbst müssen zwar das Erstellen eines Baums und das Löschen eines Baums als eigene Methoden der Klasse mit eigenen Animationen implementiert sein, in der Theorie würden sich diese allein durch das Hinzufügen und Löschen eines Blatts darstellen lassen können.
	
	// "linkes-Kind-, rechter-Bruder-Darstellung" genutzt
	Es ist zu beachten, dass die Bäume nach dem Prinzip der "linkes-Kind-, rechter-Bruder-Darstellung" implementiert wurden [1]. Dies kann zu unintuitiveren Abläufen innerhalb einiger Methoden führen, dafür wird allerdings auch eine unbegrenzte Anzahl an Kindknoten pro Elternknoten ermöglicht. In \todo{richtiges Kapitel} Kapitel 3.3 ist diese Art der Darstellung des Baums deutlicher beschrieben.
	
	[1] Cormen Seite 248


[ ] 5.4 Erweiterbarkeit um Baum-Unterarten
	
	% // Nutzer soll spezifische Art umsetzen, nicht Coder
	In diesem Abschnitt geht es nicht darum Baum-Unterarten als eigene Datenstruktur zu implementieren, damit diese vom Anwender genutzt werden können, sondern wie die derzeitige Implementierung erweitert werden kann, damit der Nutzer selbst eine spezifische Baum-Unterart umsetzen kann. 
	
	% // Was man so machen kann bzw wie man für was erweitern müsste
	Es existieren viele verschiedene Arten von Bäumen mit verschiedenen Anforderungen und Eigenschaften. In Kapitel 4.5 \todo{Verweis auf Kapitel "4.5 Anwendung von Bäumen} sind einige dieser gelistet. So könnte schon jetzt der Nutzer Binärbäume darstellen. Auch Suchbäume lassen sich bereits darstellen. Außerdem ist es denkbar eine Methode einzufügen, die für einen Suchbaum ein automatisches Einfügen vollzieht. Bei AVL-Bäumen ist dies etwas anders. Um diese gut umsetzen zu können, müsste noch eine weitere Eigenschaft zu den Knoten hinzugefügt und visualisiert werden. Ähnlich bei den Rot-Schwarz-Bäumen. Da hier, je nach Autor, jeder Knoten [1] oder jede Kante [2] entweder rot oder schwarz gefärbt sein muss, müsste ein Attribut, das dies abspeichert, in den Knoten vorhanden sein. Die Farbe in dem Knoten bzw. der Kante zu visualisieren sollte sich allerdings nicht als Problem herausstellen, da in der Visualisierung an der Stelle einfach das Attribut geprüft werden kann. Denkbar wären auch Methoden, die bei einem Baum prüfen, ob es sich tatsächlich um eine spezifische Unterart handelt oder nicht. 
	Es existieren aber auch Baumarten, bei denen sich das darstellen mit der derzeitgen implementierung als schwieriger herausstellen kann. So bräuchte es wohl bestenfalls eine neu hinzugefügte datenstruktur, um z.B. Bäume, deren Knoten mehrere Elemente halten, auf diese Weise darzustellen.
	
	[1] Cormen Seite 311 (331) Kapitel 13
	[2] Ottmann Seite 350 (369)


[ ] 5.5 Zusammenfassung
