

5 Umsetzung Baum im Programm 
			- Umsetzung der Bäume
	5.1 Problematik 
	5.2 Visualisierungsalgorithmus
	5.3 Implementierung
	5.4 Erweiterbarkeit um Baum-Unterarten
	5.5 Zusammenfassung



Kapitel:


[X] 5
	
Nachdem in Kapitel 2 PLATZHALTER \todo{Verweis auf Kapitel} die zugrunde liegende Architektur, in Kapitel 3 PLATZHALTER \todo{Verweis auf Kapitel} etwaige allgemeine Veränderungen im konkreten Code und schließlich in Kapitel 4 PLATZHALTER \todo{Verweis auf Kapitel} theoretische Hintergründe zu Bäumen beleuchtet wurden, werden wir in diesem Kapitel die zur Anwendung hinzugefügten Bäume als erste große Erweiterung näher betrachten. Der Fokus liegt hierbei auf dem Problem der Visualisierung eines Baums im Programm. Wie die Datenstruktur strukturell dem Programm hinzugefügt wurde, wird in Kapitel 2.2 PLATZHALTER \todo{Verweis auf Kapitel} behandelt. Bei der Erweiterung um Bäume wurde, wie in den in Kapitel 3 PLATZHALTER \todo{Verweis auf Kapitel} aufgezeigten Änderungen, angestrebt an den vorigen Programmcode möglichst nah anzuknüpfen. So sollen starke Unterschiede zwischen den Implementierungsweisen der Datenstrukturen vermieden werden. Im Falle der Visualisierung war dies allerdings, wie nachfolgend erläutert, weitgehend nicht möglich.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[X] 5.1 Problematik
	\todo{Kein eigenes Unterkapitel, sondern vor "5.2 Visualisierungsalgorithmus" klatschen?}

% // Wie es bisher gemacht wurde
In den Klassen zur Visualisierung der Datenstrukturen Array, Liste und Variable wird mit "layoutXY", wobei XY hier für eine der vorhandenen Datenstrukturen steht, die derzeit gezeigten visuellen Darstellungen der Instanzen einer Datenstruktur abgespeichert. Soll nun bspw. ein Element hinzugefügt werden, muss dies zweimal geschehen: Zunächst wird es in der Info-Datenstruktur \todo{Auf Definition verweisen} hinzugefügt und danach wird der zugehörige Index in "layoutXY", heißt der visuellen Darstellung, gesucht, das Element dort eingefügt und nachfolgende Elemente ggf. um einen Index nach hinten verschoben. Eine Alternative zu diesem Vorgehen wäre eine Methode, die einheitlich eine visuelle Darstellung einer Datenstruktur von Grund auf neu erstellt. Der Vorteil der erstgenannten "layout"-Methode gegenüber dieser Alternative ist, dass nur die visualisierten Teile, die sich tatsächlich ändern, betrachtet werden. Ein großer Nachteil allerdings, ist die deutlich erhöhte Menge an Code, der für die individuellen Befehle zum korrekten Visualisieren benötigt wird. Dies ist mit den "layouts" nötig, da jeder Befehl, wie bereits zuvor erklärt, auch jedes Mal auf "layoutXY" angewandt werden muss. Je mehr individueller Code pro Befehl geschrieben werden muss, desto schlechter ist die Erweiterbarkeit der Klasse und desto wahrscheinlicher können Fehler auftreten.

% // Warum das bei Bäumen Kacke ist
Bei den nun hinzugefügten Bäumen ist dieser Nachteil schwerwiegender. Werden einzelne Elemente hinzugefügt oder gelöscht, muss oft ein großer Teil, wenn nicht sogar der komplette Baum, etwas verschoben werden. Eine einheitliche und natürlich aussehende visuelle Darstellung ist ansonsten schwer umzusetzen. Zudem kann es sonst zu grafischen Fehlern, wie Überlappungen der Elemente, kommen. Auf der anderen Seite ist der genannte Vorteil der "layout"-Methode bei den Bäumen nur bedingt vorhanden, da, wie beschrieben, bei den meisten Operationen ein großer Teil vom Baum betroffen ist. Insgesamt führt dies dazu, dass eine Methode, die mit einheitlichem Vorgehen den kompletten Baum als visuelle Darstellung neu erstellt, erheblich sinnvoller erscheint. Selbst wenn die Methode alleine nicht wenig Codezeilen benötigt, reduziert sich so im gesamten die Anzahl der Zeilen erheblich, da die meisten individuellen Visualisierungsbefehle nur aus dieser einheitlichen Methode bestehen. Insbesondere die Erweiterbarkeit des Programmcodes profitiert davon.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[X] 5.2 Visualisierungsalgorithmus

% // Intuitive Ansätze
Während die visuelle Darstellung eines Arrays sehr intuitiv umgesetzt werden kann, da die Elemente auf einer Ebene mit festen Abständen zueinander gelegen sein können, ist dies bei einem Baum nicht so offensichtlich. Intuitive Ansätze wären einen Baum schlicht von oben oder von unten zu zeichnen. Soll von oben begonnen werden, fehlt bereits bei der Wurzel jeglicher Anhaltspunkt für die Platzierung auf der horizontalen Achse. Läuft die Visualisierung von unten nach oben, so besteht bei näherem Überlegen ein ähnliches Problem. Eine Ausnahme bilden dabei Bäume, deren Blätter alle auf der untersten Ebene liegen. Bei allgemeinen Bäumen kann allerdings nicht von einem solchen Spezialfall ausgegangen werden. Somit ist das Visualisieren eines Baums nicht so intuitiv umsetzbar wie die Visualisierung eines Arrays. Das letztlich entworfene und verwendete Vorgehen wird nachfolgend behandelt. 

% // Wie die Positionen der Knoten bestimmt werden
Die Funktion zur Berechnung der Positionen der Knoten (Zu beachten ist, dass hiermit nicht die für den Nutzer sichtbare Visualisierung gemeint ist, sondern das Berechnen der Positionen der Knoten, welches vor jedem Zeichnen des Baums ausgeführt wird. \todo{Diesen Satz als Fußnote??}) geht folgendermaßen vor:
	1. Alle Blätter des Baums auf unterster Ebene mit vorgegebenem Abstand platzieren.
	2. Alle Knoten der nächsthöheren Ebene betrachten und wie folgt verfahren:
		2a. Ist der Knoten ein Blatt, so setze seine y-Koordinate auf die y-Koordinate der derzeitigen Ebene. Die x-Koordinate ist bereits korrekt gesetzt, da das Blatt zunächst auf unterster Ebene platziert wurde.
		2b. Ist der Knoten kein Blatt, so setze seine x-Koordinate auf die x-Koordinate seines mittleren Kindknotens. Hat der Knoten eine gerade Anzahl an Kindern, so gibt es zwei mittlere Kinder und stattdessen wird das Mittel der x-Koordinaten dieser beiden genutzt.
	3. Wiederhole Schritt 2 bis alle Ebenen abgearbeitet wurden.

% // Anhand von Grafiken ausführen
\todo{Grafiken einfügen und die Beschriftungen richtig setzen}
Unter "TreeDemo.java" ist in der Anwendung ein Baum zu finden, welcher nun als Beispiel betrachtet wird, um den vorangegangenen Algorithmus veranschaulichen zu können. Angenommen es liege dieser Baum \todo{Abbildung 1 "4 tree positioning drawn"} im Programm vor und die Knoten hätten noch keine zugewiesenen Koordinaten. Wenn nun der Algorithmus zum Positionieren der Knoten aufgerufen wird, wäre nach dem oben beschriebenen ersten Schritt das Zwischenergebnis \todo{Abbildung 2 "4 tree positioning drawn"}, \todo{folgenden Halbsatz als Fußnote??} vorausgesetzt man visualisierte die Knoten an dieser Stelle. Alle Blätter des Baums wurden auf der untersten Ebene platziert. Wird daraufhin der zweite Schritt ausgeführt, werden, wie in \todo{Abbildung 3 "4 tree positioning drawn"} erkennbar, die Positionen der Blätter 5, 7 und 10 aktualisiert und die Knoten 6, 8 und 9 genau über ihrem jeweils einzigen Kind platziert. Als nächstes wiederholt sich Schritt zwei, weshalb die zweite Ebene betrachtet und damit auch die Position von Blatt 4 aktualisiert wird. Weiterhin werden Knoten 1, 2 und 3 eingefügt. Während Knoten 3 nur ein Kind hat und deswegen genau über eben diesem platziert wird, ist das bei Knoten 1 und 2 anders. Knoten 1 wird genau über dem mittleren Kind, also Knoten 6 platziert. Die Positionen der Knoten 5 und 7 werden nicht in die Berechnung mit einbezogen. Knoten 2 hat zwei mittlere Kinder, wodurch die x-Koordinate von Knoten 2 genau zwischen diesen platziert wird. Im dritten und damit auch letzten Aufruf von Schritt zwei wird die erste Ebene betrachtet und der Wurzelknoten hinzugefügt (\todo{Abbildung 4 "4 tree positioning drawn"}). Da dieser eine gerade Anzahl an Kindknoten hat, werden nur die mittleren beiden, Knoten 2 und 3, betrachtet, um die x-Koordinate der Wurzel zu berechnen.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[X] 5.3 Implementierung
	
% // Art der Speicherung
Die Bäume nach dem Prinzip der "linkes-Kind-, rechter-Bruder-Darstellung" implementiert [1]. Dies kann zu unintuitiven Abläufen innerhalb einiger Methoden führen, dafür wird allerdings auch eine unbegrenzte Anzahl an Kindknoten pro Elternknoten ermöglicht. In Kapitel PLATZHALTER \todo{richtiges Kapitel} ist diese Art der Darstellung deutlicher beschrieben.

% // Implementierte Funktionen
Die in Kapitel PLATZHALTER \todo{richtiges Kapitel} aufgezählten vier atomaren Funktionen (Hinzufügen eines Blatts, Löschen eines Blatts, Elternknoten eines Knotens ändern, Wert eines Knotens ändern) wurden als Methoden (addLeaf, deleteLeaf, changeParent, changeValue) \todo{kursiv oder so} implementiert. Diese Methoden können alle hier relevanten Funktionsweisen nachbilden. Genauer aufgezeigt ist dies im zuvor bereits genannten Kapitel PLATZHALTER \todo{richtiges Kapitel}. In der Anwendung selbst muss allerdings noch das Erstellen eines Baums (create_Tree) \todo{kursiv oder so} als eine eigene Methode der Klasse mit eigenen Animationen implementiert sein. Weiterhin wurden zwei Methoden hinzugefügt, um auf Elemente zuzugreifen. Bei getIndexByValue(Object) \todo{kursiv oder so} wird ein Wert übergeben und der Index eines Knotens, der diesen Wert speichert, zurückgegeben. Mit getNodeByIndex(int) wird ein Knoten zurückgegeben, dessen Index der übergebenen Zahl entspricht.

[1] Cormen Seite 248


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[X] 5.4 Erweiterbarkeit um Baum-Unterarten
	
% // Nutzer soll spezifische Art umsetzen, nicht Coder
In diesem Abschnitt geht es nicht darum, Baum-Unterarten als eigene Datenstruktur zu implementieren, damit diese vom Anwender genutzt werden können, sondern wie die derzeitige Implementierung erweitert werden kann, damit der Nutzer selbst eine spezifische Baum-Unterart umsetzen kann.

% // Was man so machen kann bzw wie man wofür erweitern müsste
Es existieren viele verschiedene Arten von Bäumen mit verschiedenen Anforderungen und Eigenschaften. In Kapitel PLATZHALTER \todo{Verweis auf Kapitel "4.5 Anwendung von Bäumen"} sind einige dieser gelistet. So könnte schon jetzt der Nutzer Binärbäume darstellen. Auch Suchbäume lassen sich bereits umsetzen. Außerdem ist es denkbar eine Methode einzufügen, die für einen Suchbaum ein automatisches Einfügen vollzieht. Bei AVL-Bäumen ist dies etwas anders. Um diese gut umsetzen zu können, müsste noch eine weitere Eigenschaft zu den Knoten hinzugefügt und visualisiert werden. Ähnlich bei den Rot-Schwarz-Bäumen. Da bei diesen, je nach Autor, jeder Knoten [1] oder jede Kante [2] entweder rot oder schwarz gefärbt sein muss, müsste ein Attribut, das dies abspeichert, in den Knoten vorhanden sein. Die Farbe in dem Knoten bzw. der Kante zu visualisieren sollte sich allerdings nicht als Problem herausstellen. In der Visualisierung kann beim Zeichnen der Knoten einfach das Attribut geprüft und der Knoten bzw. die Kante passend gefärbt werden. Denkbar wären auch Methoden, die bei einem Baum prüfen, ob es sich tatsächlich um eine spezifische Unterart handelt oder nicht.
Es existieren jedoch auch Baumarten, bei denen sich das Darstellen mit der derzeitigen Implementierung als schwieriger herausstellen kann. So bräuchte es wohl bestenfalls eine neu hinzugefügte datenstruktur, um z.B. Bäume, deren Knoten mehrere Elemente halten, auf eine gut anschauliche Weise darzustellen.

[1] Cormen Seite 311 (331) Kapitel 13
[2] Ottmann Seite 350 (369)
