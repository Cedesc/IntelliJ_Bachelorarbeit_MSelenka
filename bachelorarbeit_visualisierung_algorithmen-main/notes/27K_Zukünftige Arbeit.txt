

7 Zukünftige Arbeit
			- Woran man ansetzen kann
	7.1 Bestehende Probleme
	7.2 Ausblick
	7.3 Zusammenfassung



Kapitel:


[X] 7 Zukünftige Arbeit

	In den letzten Kapiteln wurden die hinzugefügten Erweiterungen verdeutlicht. Als vorletztes Kapitel soll nun auf Punkte eingegangen werden, an die nach dieser Arbeit angesetzt werden kann. Dies beinhaltet einerseits Probleme, die noch in der Anwendung vorhanden sind und andererseits Funktionalitäten, die noch hinzugefügt werden können.


[X] 7.1 Bestehende Probleme
	
	% // Allgemein
	Wie bereits gezeigt, wurde die Anwendung um einige Funktionalitäten erweitert. Jedoch bleiben zwei größere, bislang ungelöste Probleme bestehen. Diese wollen wir in diesem Unterkapitel aufzeigen und dazu mögliche Lösungsansätze präsentieren. 
	
	% // Animationen für Löschoperationen
	Das erste Problem wurde durch das Hinzufügen der Animationen ersichtlich. Dabei handelt es sich um die Animationen jeglicher Löschoperationen. Die Problematik besteht darin, dass zum momentanen Stand zuerst die Info-Datenstruktur \todo{Auf Definition verweisen} geändert und daraufhin erst die visuellen Elemente erzeugt und die Animation erstellt wird. Soll nun eine Animation für eine Operation, die mindestens ein Element aus der Datenstruktur löscht, erstellt werden, ist es nicht möglich die originale Visualisierung des gelöschten Inhalts zu nutzen, da das Element zuvor gelöscht wurde. 
	% // naiv umdrehen - verschiebt das Problem nur
	Zwar ist es möglich die Reihenfolge umzudrehen, bedeutet es würde zuerst visualisiert und animiert und daraufhin die Info-Datenstruktur \todo{Auf eine Definition verweisen?} geändert werden, jedoch besteht dann ein analoges Problem bezüglich aller Operationen, die Elemente hinzufügen. 
	% // immer neue visuelle Elemente erzeugen
	Ein erster tatsächlicher Lösungsansatz ist das gelöschte Element visuell neu zu erzeugen. Das heißt, das gelöschte Element wird im Hintergrund abgespeichert und übergeben, sodass von diesem eine visuelle Darstellung erzeugt werden kann. Dieser Ansatz stellt sich allerdings als umständlich und fehleranfällig heraus, da visuelle Abbilder etlicher Elemente erzeugt, richtig platziert und auch wieder richtig gelöscht werden müssen. Dennoch könnte diese Idee mit geschickter Umsetzung das Problem beheben, ohne zu starke Nachteile aufzuweisen.
	% // sowohl vor als auch nach visualisierung animation zulassen
	Ein eventuell besserer Lösungsansatz wäre, dass nicht, wie oben beschrieben, vor der Manipulierung der Datenstruktur die Visualisierung ansetzt, sondern diese sowohl davor als auch danach aufgerufen werden kann. Dies kann von Operation zu Operation einzeln entschieden werden, indem die Reihenfolge der Funktionsaufrufe in der Info-Datenstruktur \todo{Auf eine Definition verweisen?} getauscht wird. In Abbildung 1 \todo{auf richtige Abbildung verweisen} ist dies anhand der fiktiven Datenstruktur "XY" verdeutlicht. Während in "addElement" zuerst das Element hinzugefügt und daraufhin erst die Visualisierung ausgeführt wird, so wie es im vorhandenen Programmcode derzeit bei allen Operationen der Fall ist, wird dies bei "deleteElement" durch Vertauschen der Zeilen andersrum ausgeführt. Für zukünftige potenziell komplexere Operationen könnte dies noch nicht ausreichend sein, da auch Operation, die bestenfalls sowohl vor als auch nach der tatsächlichen Änderung eine Visualisierung benötigen, denkbar sind. In dem Fall wäre es möglich die Funktion wie in Abbildung 2 \todo{auf richtige Abbildung verweisen} gezeigt zu schreiben. Hierbei sind zwei Visualisierungsfunktionen vorhanden, eine zum Ausführen vor der Änderung, eine für nach der Änderung.
	Zu bemerken ist dabei, dass auf die tatsächliche Abfolge der Befehle in Kombination mit den Animationen zu achten ist. Die Befehle in der kompletten Visualisierung, wie in Kapitel PLATZHALTER \todo{auf richtiges Kapitel verweisen} beschrieben, durch Events der Animationen ausgelöst werden. Sind dementsprechende Änderungen allerdings vorgenommen worden, wäre nicht nur das Problem der Animationen für Löschoperationen gelöst, sondern zudem eine gute Grundlage für die Visualisierung zukünftig hinzugefügter Operationen geschaffen.
	
	% // Justierung des Baums
	Das zweite Problem bezieht sich auf die Visualisierung der implementierten Bäume. Derzeit wird noch, wenn z.B. ein Knoten zum Baum hinzugefügt wird, der Knoten animiert hinzugefügt, der Rest des Baums allerdings auf einen Schlag positioniert. Dies verfehlt das eigentliche Ziel der Implementierung von Animationen. Zwar sind die einzelnen Schritte deutlich nachvollziehbarer, jedoch kann die Verständlichkeit vor allem bei größeren Neupositionierungen stark darunter leiden. Besser wäre es, würden diese Neupositionierungen der Knoten nicht in einem Schritt, sondern durch Bewegungsanimationen von Start- zum Zielpunkt ausgeführt werden.
	% // Neupositionierung umsetzen
	Das gut umzusetzen, kann sich als schwierig herausstellen. Ein erster Ansatz wäre es mithilfe sowohl der vorherigen als auch der letztendlichen Koordinaten aller Knoten Translationsanimationen zu erstellen. Um auf alle diese Koordinaten zugreifen zu können, ist es möglich vor der Ausführung der Operation zuerst alle Koordinaten abzuspeichern, dann die Operation auszuführen, die Koordinaten der Knoten neu zu berechnen und diese \todo{Fußnote mit Inhalt "vor dem Erstellen der Visualisierung"???} zusätzlich abzuspeichern. Die Erstellung der einzelnen Animationen ist hierbei nicht schwierig. 
	Allerdings darf die Änderung durch die getätigte Operation, wie bspw. ein geändertes Element, zum Start der Visualisierung noch nicht sichtbar sein. Entweder es wird hierfür eine generelle Lösung eingebaut oder die Visualisierung muss umständlich bei jedem Befehl individuell manipuliert werden. Eine naive generelle Lösung wäre die Operation zunächst rückgängig zu machen und daraufhin nochmal aufzurufen. Dies erscheint jedoch als umständlich und sollte, wenn möglich, vermieden werden. 
	Abseits dessen bleiben die Kanten des Baums weiterhin ein Problem, da sie trotz unterschiedlich weiten Bewegungen von Elternknoten und Kindknoten passend mitbewegt werden sollten. Das bedeutet, es reicht bei den Kanten nicht aus diese nur zu verschieben, sondern auch die Drehung und die Länge der Kanten muss für eine gute Visualisierung geändert werden.
	% // Mit vorherig beschriebenen "Reihenfolge Manipulierung Visualisierung" verbinden
	Wurde eine Umsetzung für das Justieren des Baums gefunden und die Methoden der Info-Datenstruktur \todo{Auf eine Definition verweisen?} wie zuvor beschrieben angepasst, sodass sowohl vor als auch nach der Änderung der Datenstruktur eine Visualisierung aufrufbar ist, so wäre es möglich den Baum mit der ersten Animation zunächst passend zu justieren und danach mit einer zweiten Animation die Operation, wie das Hinzufügen eines Blatts, zu visualisieren.


\todo{write caption and label}
\begin{lstlisting}[language=Java, caption={}\label{Abbildung 1}]
	public class InfoXY {
		// ...
		public void addElement() {
			// ...
			// add the element
			this.xyContent.addElement();
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.addElementVisualization(this);
			}
		}
		public void deleteElement() {
			// ...
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.deleteElementVisualization();
			}
			// delete the element
			this.xyContent.deleteElement();
		}
		// ...
	}
\end{lstlisting}

\todo{write caption and label}
\begin{lstlisting}[language=Java, caption={}\label{Abbildung 2}]
	public class InfoXY {
		// ...
		public void complexOperation() {
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.complexVisualizationBefore();
			}
			// execute the command
			this.xyContent.complex();
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.complexVisualizationAfter();
			}
		}
		// ...
	}
\end{lstlisting}


[X] 7.2 Ausblick
	
	% // Schöner Einleitungssatz
	An dieser Stelle sollen konkrete Möglichkeiten dargestellt werden, an denen nachfolgende Arbeiten ansetzen können.
	
	% // Aus "Bestehende Probleme"
	Die geschilderten Probleme aus dem vorherigen Kapitel PLATZHALTER \todo{Verweis auf "6.2 Bestehende Probleme"} stellen eine Herausforderung dar, an die angesetzt werden kann. Dabei handelt es sich um Animationen für Löschoperationen und dem automatischen visuellen Justieren des Baums. Um diese Probleme zu überwinden, können die im selben Kapitel aufgezeigten Vorschläge erste Ansätze bieten.
	
	% // Erweiterbarkeit um Animationen
	Ein anderer Punkt, an dem es möglich ist zukünftig anzusetzen, ist weitere Animationen für die implementierten Datenstrukturen zu entwerfen und hinzuzufügen. So bietet es sich an die restlichen Befehle der vorhandenen Datenstrukturen zu animieren. In Kapitel PLATZHALTER \todo{Verweis auf Erweiterung um Animationen} wird beschrieben, wie dies funktionieren würde.
	% // Erweiterbarkeit um Datenstrukturen
	Weitere Datenstrukturen können nachfolgend implementiert werden. Wie die Anwendung um neue Datenstrukturen zu erweitern ist, wird in PLATZHALTER \todo{Verweis auf Erweiterbarkeit um neue Datenstrukturen} erklärt. Zudem wird in Kapitel 5.4 \todo{Verweis auf Kapitel} exemplarisch an einigen Baum-Unterarten aufgezeigt, welche dieser Baumarten schon von Nutzern umsetzbar sind und welche Funktionalitäten noch zu den Bäumen hinzugefügt werden müssen, um weitere Baumunterarten zu ermöglichen.
	
	% // Weiteres
	Die implementierten allgemeinen Bäume können auch an anderen Stellen erweitert werden. So können komplexere Befehle hinzugefügt werden, wie bspw. Rotationen. Diese können, wenn gewünscht, einzig und allein mit einer Kombination aus den bereits vorhandenen atomaren Operationen umgesetzt werden.


[X] 7.3 Zusammenfassung
	--- leer lassen ---
