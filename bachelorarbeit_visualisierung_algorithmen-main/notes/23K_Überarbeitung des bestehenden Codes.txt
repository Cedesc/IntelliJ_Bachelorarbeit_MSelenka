


3 Überarbeitungen am bestehenden Code
			- Änderungen am Code, die nicht zu den großen Erweiterungen gehören (Animation, Bewegung, Zoomen, Bäume)
	3.1 Refaktorierung & Kommentare
	3.2 ArrayList
	3.3 Komplette Visualisierung
	3.4 Config Datei
	3.5 Zusammenfassung



Was ich reinbringen kann:
	{Sequenzdiagramm einfügen?}
	{"Config" überarbeiten? Auch auf ConfigReader eingehen oder das so lassen? Sollte ich irgendwo in der Arbeit ConfigReader erwähnen, sollte ich das hier aufgreifen}



Kapitel:


3 Überarbeitungen am bestehenden Code
	
	In diesem Kapitel werden die ersten Anpassungen im Code beleuchtet. Dabei befasst sich das Kapitel hauptsächlich mit Überarbeitungen des Codes und nicht mit den in nachfolgenden Kapiteln behandelten Erweiterungen um Bäume, Zooming und Bewegung. Bei den in diesem Kapitel betrachteten Erweiterungen wurde versucht möglichst nah am bereits vorhandenen Code anzuknüpfen, sodass der Code kohärent erscheint und keine großen Änderungen, die zu unerwarteten Verhalten führen können, eingebaut werden. 
	Beachtet sei dabei, dass der Fokus dieser Arbeit auf der Beleuchtung der Erweiterungen liegt und daher die Anwendung selbst nicht groß erläutert wird. Dies wurde bereits in PLATZHALTER \todo{Quellenverweis auf die andere BA} getan. Um die grundlegenden Abläufe und Architektur zu verstehen, sollte daher die genannte Arbeit betrachtet werden. 
	Allerdings ist es sinnvoll den Begriff der "Info-Datenstruktur", der in den nachfolgenden Kapiteln häufiger aufkommt noch einmal kurz in den passenden Kontext zu setzen und zu erläutern:
		- Für jede Datenstruktur muss eine Klasse existieren, die vom Nutzer aufgerufen und genutzt werden kann. Dabei werden die Elemente und Werte der Datenstruktur nicht direkt in der vom Nutzer bedienten Klasse gespeichert, sondern die Klasse speichert eine sogenannte "Info-Datenstruktur". Die "Info-Datenstruktur" ist dafür da die Datenstruktur abzuspeichern und die je Befehl passenden Visualisierungen aufzurufen.


3.1 Refaktorierung & Kommentare

	Fast alle Dateien wurden geringfügig geändert. Das kommt daher, dass viele Rechtschreibfehler korrigiert, teilweise Kommentare hinzugefügt oder auch Dateien oder Funktionen umbenannt wurden. So wurde zum Beispiel zur besseren Verständlichkeit die Methode "startVisualization" der Klasse "ParentViewModel" zu "startCompleteVisualization" umbenannt, da die Methode an sich die komplette Visualisierung statt der Schritt-für-Schritt Visualisierung startet, es mit dem vorherigen Namen aber auch wie eine allgemeinere, für die Schritt-für-Schritt Visualisierung wichtige, Funktionalität wirken konnte.
	Auch wurden an sehr vielen Stellen Kleinigkeiten geändert, die zuvor in der Entwicklungsumgebung Warnungen hervorgerufen haben. So wurden unter anderem rohe Verwendungen parametrisierter Klassen korrigiert oder auch ungenutzte Auflistungen von Fehlern in der "throws list" der jeweiligen Methode entfernt.
	Da in der Klasse "ParentViewModel" ein großer Teil des Codes für die Methoden "exeNextCommand", "exePreviousCommand" und "startCompleteVisualization" sehr ähnlich war, wurde dieser als eigene Methode mit dem Namen "exeCommand" ausgelagert. Innerhalb der drei genannten Methoden hat sich so die Anzahl der Zeilen von jeweils 60 auf jeweils maximal 10 geändert. Somit ist der Bereich des Codes nun deutlich übersichtlicher. Weiterhin auch besser anpassbar, da durch das Auslagern der Methode nur an einer Stelle eventuelle Änderungen getätigt werden müssen, statt wie zuvor darauf achten zu müssen, dass man an allen drei Stellen den Code umschreibt.
	Alle diese Änderungen haben keine Änderungen der Funktionalitäten des Programms bewirkt, sondern sollen für stärkere Klarheit und bessere Wartbarkeit des Programmcodes sorgen.


3.2 ArrayList

	Wie in PLATZHALTER \todo{Verweis auf BA von MS} beschrieben, wurde die Datenstruktur "Array" der Anwendung bereits hinzugefügt. Diese führt bei Nutzung allerdings noch häufig zu unerwartetem Verhalten oder auch Fehlern. Um an einer möglichst stabilen und simplen Datenstruktur Animationen erstellen zu können, wurde die Datenstruktur "ArrayList" hinzugefügt. Dabei wurden einige Operationen von "Array" übernommen. Zwar produziert "ArrayList" seltener Fehler, bietet bislang allerdings auch deutlich weniger Funktionalitäten. In PLATZHALTER \todo{Verweis auf 5.1.1 Animationen in ArrayList} werden die für "ArrayList" hinzugefügten Animationen genauer betrachtet. 
	

3.3 Komplette Visualisierung

	Der Code und auch das Konzept für die komplette Visualisierung wurde stark überarbeitet. Zuvor war es nicht möglich in der kompletten Visualisierung die einzelnen Schritte nachzuverfolgen, stattdessen sollte nach gewisser Wartezeit direkt das Endergebnis angezeigt werden. Durch einen Fehler konnte es aber zu falschen Ergebnissen kommen, da statt allen Befehlen nur einer wiederholt abgespielt wurde. Nun kann die Anwendung nach dem Auswählen der kompletten Visualisierung die Befehle zeitversetzt oder auch mit ihren Animationen nacheinander abspielen, sodass der Algorithmus selbständig nach und nach ausgeführt wird und es für den Nutzer wie eine Aufzeichnung wirkt.
	Um dies zu erreichen wurden zunächst Animationen (und auch "leere Animationen" \todo{begriff abändern?}, in denen sich nichts bewegt, sondern einfach nur abgewartet wird) hinzugefügt. Alle Animationen wollten dabei allerdings zeitgleich starten. Mit dem Hintergrund, dass die Animationen korrekt zeitgleich starten sollten, wurden daraufhin die Animationen stattdessen gespeichert, statt sofort abspielen zu lassen und daraufhin nach und nach abgespielt. Dadurch wurden zwar die Animationen korrekt nacheinander abgespielt, jedoch gab es ein anderes Problem: Zum Start der ersten Animation wurden bereits alle Elemente erstellt, sodass schon zum Start direkt alle Elemente, oft an unsinnigen Positionen, sichtbar waren. 
	Eine Möglichkeit, um das zu beheben, wäre alle Elemente, die derzeit nicht angezeigt werden, unsichtbar zu stellen. Geht man diesen Lösungspfad, kann die zukünftige Erstellung von Animationen jedoch verkompliziert werden. Zudem kommt es schnell zu Schwierigkeiten, da die unsichtbaren Elemente dennoch vorhanden sind. Beispiel dafür wäre das korrekte Einfügen an eine bestimmte Position in einer Arraylist. Hat man hier unsichtbare Elemente, muss man genau schauen, wo das tatsächliche Element landen wird.
	Ein anderer betrachteter Lösungsansatz war, dass zwischen den einzelnen Befehlsausführungen das Programm die entsprechende Zeit wartet, bis es fortfährt. Hier müsste man allerdings zuerst eine gute Methode finden, die zwar das Programm warten lässt, gleichzeitig aber weitere Nutzereingaben, wie das Abbrechen der Visualisierung erlaubt. Außerdem könnte es unhandlich werden die tatsächlichen Wartezeiten einzubauen und es wäre gegebenenfalls auch vom Gerät abhängig, wie schnell dieses die Berechnungen durchführen kann und ob sich in der Praxis nicht vielleicht die Wartezeit von der Zeit der Animation unterscheidet.
	Die letztlich implementierte Lösung geht wie folgt vor: 
		1. Der momentane Befehl wird ausgeführt, wodurch auch die Animation dazu erstellt, aber noch nicht gestartet, wird.
		2. Die Funktion zum Starten des nächsten Befehls wird als "onFinishedEvent" zu der Animation hinzugefügt, welches bewirkt, dass der hinzugefügte Befehl dann gestartet wird, wenn die Animation fertig ist.
		3. Die momentane Animation wird gestartet.
		4. Nach der Animation wird durch das Event der nächste Befehl ausgeführt und die Schritte wiederholen sich.
		\todo{Hier Sequenzdiagramm?}
	Nachteile dieser Herangehensweise sind, dass es unintuitiv erscheint und dass gewisse Klassen dabei mehr ineinander verzahnt sind. So wird in der derzeitigen Implementierung vom "ExecuteAlgorithmController" auf das "ParentViewModel" zugegriffen, obwohl letzteres an sich höher gestellt sein sollte. Dies kann die Verständlichkeit des Codes beeinträchtigen, weshalb eine ausführliche Dokumentierung dazu angestrebt wurde. Man könnte auch sagen, ein Nachteil wäre, dass jeder Befehl eine Animation braucht, da ansonsten natürlich nicht der nächste Befehl ausgeführt werden könnte. Allerdings lässt sich das einfach mit einem Platzhalter beheben. Dies ist auch so umgesetzt, durch eine Überladung der Methode "generateNode" in den Visualisierungsklassen. Wird keine Animation übergeben, so wird eine "leere Animation" \todo{begriff abändern?} erstellt. 
	Auf der Seite der Vorteile wäre zunächst, dass der Nutzer ohne Probleme Eingaben während den Animationen tätigen kann. Weiterhin ist man von keinem anderen Timer abhängig, wodurch möglicherweise unterschiedliche Zeiten vermieden werden. Die Funktionalität hängt auch nicht von der Länge der Animationen ab, sodass sie beliebig lang und natürlich auch unterschiedlich lang sein können. Mit dieser Lösung bewegt sich nun die Hervorhebung des ausgewählten Befehls in der Befehlsliste mit Befehl zu Befehl mit, was mit der Lösung durch das unsichtbar stellen nicht so einfach möglich gewesen wäre. Trotz des etwas befremdlichen Ansatzes, mussten für die Umsetzung nur kleine Änderungen an bestehendem Code getätigt werden. Nachdem die Idee und das Konzept für diese Art der kompletten Visualisierung aufkam, gab es in der letztlichen Implementierung keine größeren Schwierigkeiten und es brauchte, im Vergleich zu anderen Überlegungen zur Lösung des Problems, deutlich weniger Zeilen im Code.


3.4 Config

	Da es gewisse Parameter im Code gibt, die je nach Zweck angepasst werden sollten, wurde eine "Config"-Datei hinzugefügt, die dafür sorgt, dass man die wichtigsten Parameter auf einen Blick sieht und auch leicht anpassen kann. So ist nun der Ordnerpfad zu den Algorithmen in der Datei abgespeichert, sodass man diesen nicht beschwerlich raussuchen muss, möchte man die Anwendung von einem anderen Gerät starten. Weiterhin sind die Startwerte für die Fensterbreite, Fensterhöhe und die Option für Vollbild des Fensters hierin abgespeichert. Auch der Referenzwert für die Länge aller Animationen und sowohl die maximale als auch die minimale mögliche Skalierung für den Zoom kann hier geändert werden.
