


3 Überarbeitungen am bestehenden Code
			- Änderungen am Code, die nicht zu den großen Erweiterungen gehören (Animation, Bewegung, Zoomen, Bäume)
	3.1 Refaktorierung & Kommentare
	3.2 ArrayList
	3.3 Komplette Visualisierung
	3.4 Config Datei
	3.5 Zusammenfassung



Kapitel:


[X] 3 Überarbeitungen am bestehenden Code

	Nachdem die Änderungen der grundlegenden Architektur aufgezeigt wurden, werden nachfolgend Anpassungen im Code beleuchtet. Dabei befasst sich das Kapitel hauptsächlich mit Überarbeitungen des Codes und nicht mit den in anderen Kapiteln behandelten Erweiterungen um Bäume, Zooming und Bewegung. Bei den in diesem Kapitel betrachteten Überarbeitungen wurde versucht möglichst nah am bereits vorhandenen Code anzuknüpfen, sodass der Programmcode im gesamten kohärent erscheint und unerwartetes Verhalten durch große Änderungen vermieden wird. 


[X] 3.1 Refaktorierung & Kommentare

	Fast alle Dateien wurden geringfügig geändert. Die Änderungen betreffen allerdings nur in den wenigsten Fällen die Architektur. Das kommt daher, dass viele Rechtschreibfehler korrigiert, Kommentare hinzugefügt oder auch Dateien oder Funktionen umbenannt wurden. So wurde zum Beispiel zur besseren Verständlichkeit die Methode "startVisualization" der Klasse "ParentViewModel" zu "startCompleteVisualization" umbenannt, da die Methode die komplette Visualisierung statt der Schritt-für-Schritt Visualisierung startet, es mit dem vorherigen Namen aber wie eine allgemeinere, für die Schritt-für-Schritt Visualisierung wichtige, Funktionalität wirken konnte.
	Zudem wurden an sehr vielen Stellen Kleinigkeiten geändert. So wurden unter anderem rohe Verwendungen parametrisierter Klassen korrigiert oder ungenutzte Auflistungen von Fehlern aus der jeweiligen Methode entfernt.
	Da in der Klasse "ParentViewModel" ein großer Teil des Codes für die Methoden "exeNextCommand", "exePreviousCommand" und "startCompleteVisualization" sehr ähnlich war, wurde dieser als eigene Methode mit dem Namen "exeCommand" ausgelagert. Innerhalb der drei genannten Methoden hat sich damit die Anzahl der Zeilen von jeweils 60 auf jeweils maximal 10 verringert. Somit ist dieser Bereich des Codes nun deutlich übersichtlich und besser anpassbar, da durch das Auslagern der Methode nur an einer Stelle eventuelle Änderungen getätigt werden müssen, statt wie zuvor ggf. an allen drei Stellen den Code auf die gleiche Weise umschreiben zu müssen. 
	Alle diese Änderungen haben keine Einschränkungen der Funktionalitäten des Programms bewirkt, sondern sollen für stärkere Klarheit und bessere Wartbarkeit des Programmcodes sorgen.


[X] 3.2 ArrayList

	Wie in PLATZHALTER \todo{Verweis auf BA von MS} beschrieben, wurde die Datenstruktur "Array" der Anwendung bereits hinzugefügt. Diese führt bei Nutzung allerdings noch häufig zu unerwartetem Verhalten oder auch Fehlern. Um an einer möglichst stabilen und simplen Datenstruktur Animationen erstellen zu können, wurde die Datenstruktur "ArrayList" hinzugefügt. Dabei wurden einige Operationen von "Array" übernommen. Zwar produziert "ArrayList" seltener Fehler, bietet allerdings auch deutlich weniger Funktionalitäten. In PLATZHALTER \todo{Verweis auf 5.1.1 Animationen in ArrayList} werden die für "ArrayList" hinzugefügten Animationen genauer betrachtet. 
	

[X] 3.3 Komplette Visualisierung

	Der Code und auch das Konzept für die komplette Visualisierung wurde stark überarbeitet. Zuvor war es nicht möglich in der kompletten Visualisierung die einzelnen Schritte nachzuverfolgen, stattdessen sollte nach gewisser Wartezeit direkt das Endergebnis angezeigt werden. Durch einen Fehler konnte es aber zu falschen Ergebnissen kommen, da statt allen Befehlen nur einer wiederholt abgespielt wurde. Nun kann die Anwendung nach dem Auswählen der kompletten Visualisierung die Befehle zeitversetzt oder, falls vorhanden, mit ihren Animationen nacheinander abspielen, sodass der Algorithmus selbständig nach und nach ausgeführt wird und es für den Nutzer wie eine Aufzeichnung wirkt.
	Um dies zu erreichen wurden zunächst Animationen hinzugefügt. Wird das Programm einzig mit dieser Änderung ausgeführt, starten alle Animationen zeitgleich. Um dies zu vermeiden, können die Animation stattdessen zunächst abgespeichert und daraufhin nach und nach abgespielt werden. Dadurch wären jedoch zum Start der Visualisierung bereits alle Elemente sichtbar.
	Eine Lösung dafür wäre es alle Elemente, die derzeit nicht angezeigt werden, unsichtbar zu stellen. So würden allerdings zukünftige Erstellungen von Animationen verkompliziert werden. Zudem kommt es schnell zu Schwierigkeiten, da die unsichtbaren Elemente dennoch vorhanden sind.
	Ein anderer Lösungsansatz ist, dass zwischen den einzelnen Befehlsausführungen das Programm die entsprechende Zeit wartet, bis es fortfährt. Dazu müsste zuerst eine Methode gefunden werden, die zwar das Programm warten lässt, gleichzeitig aber weitere Nutzereingaben, wie das Abbrechen der Visualisierung erlaubt. Außerdem könnte das Einbauen der tatsächlichen Wartezeiten unhandlich sein, ggf. sogar vom Gerät abhängig, wie schnell dieses die Berechnungen durchführen kann und ob sich in der Praxis nicht die Wartezeit für die eine Animation von der Länge der anderen Animation unterscheiden kann.
	
	Die letztlich implementierte Lösung geht wie folgt vor: 
		1. Der momentane Befehl wird ausgeführt, wodurch auch die Animation dazu erstellt, aber noch nicht gestartet, wird.
		2. Die Funktion zum Starten des nächsten Befehls wird als "onFinishedEvent" zu der Animation hinzugefügt, welches bewirkt, dass der hinzugefügte Befehl dann gestartet wird, wenn die Animation fertig ist.
		3. Die momentane Animation wird gestartet.
		4. Nach der Animation wird durch das Event der nächste Befehl ausgeführt und die Schritte wiederholen sich.
	Nachteile dieser Herangehensweise sind, dass es unintuitiv erscheint und dass gewisse Klassen dabei mehr ineinander verzahnt sind. Dies kann die Verständlichkeit des Codes beeinträchtigen, weshalb eine ausführliche Dokumentierung dazu angestrebt wurde. Auf den ersten Blick ist ein weiterer Nachteil, dass jeder Befehl eine Animation benötigt, da ansonsten der dritte Schritt nicht ausgeführt werden kann. Dies lässt sich aber mit einem Platzhalter beheben. Durch eine Überladung der Methode "generateNode" in den Visualisierungsklassen wird, angenommen der Befehl hat keine Animation, automatisch eine Animation erstellt. Die erstellte Animation hat zwar eine bestimmte Laufzeit, durch die jedoch nichts bewegt oder geändert wird.
	Auf der Seite der Vorteile wäre zunächst, dass der Nutzer ohne Probleme Eingaben während den Animationen tätigen kann. Weiterhin besteht keine Abhängigkeit zu Timern, wodurch möglicherweise unterschiedliche Zeiten vermieden werden. Die Funktionalität dieses Algorithmus hängt auch nicht von der Länge der Animationen ab, sodass sie beliebig und unterschiedlich lang sein können. Mit dieser Lösung bewegt sich nun die Hervorhebung des ausgewählten Befehls in der Befehlsliste mit Befehl zu Befehl mit. Trotz des befremdlichen Ansatzes, mussten für die Umsetzung nur kleine Änderungen an bestehendem Code getätigt werden. Die Umsetzung benötigt, im Vergleich zu anderen Überlegungen zur Lösung des Problems, deutlich weniger Zeilen im Code.


[X] 3.4 Config

	Da es gewisse Parameter im Code gibt, die je nach Zweck angepasst werden sollten, wurde eine "Config"-Datei hinzugefügt, die dafür sorgt, dass die wichtigsten Parameter auf einen Blick einsehbar sind und auch leicht angepasst werden können. So ist nun der Ordnerpfad zu den Algorithmen in der Datei abgespeichert, sodass dieser nicht beschwerlich herausgesucht werden muss, wenn die Anwendung von einem anderen Gerät gestartet werden soll. Weiterhin sind die Startwerte für die Fensterbreite, Fensterhöhe und die Option für Vollbild des Fensters hierin abgespeichert. Auch der Referenzwert für die Länge aller Animationen und sowohl die maximale als auch die minimale mögliche Skalierung für den Zoom kann hier geändert werden.


[X] 3.5 Zusammenfassung
	--- leer lassen ---
