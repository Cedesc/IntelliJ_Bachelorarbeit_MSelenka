

6 Zukünftiger Code
			- Woran man ansetzen kann
	6.1 Erweiterbarkeit
		6.1.1 Erweiterbarkeit um weitere Datenstruktur
		6.1.2 Erweiterbarkeit um Baumunterarten = "4.? Erweiterbarkeit der Bäume"?
		6.1.3 Erweiterbarkeit um weitere Animationen
	6.2 Bestehende Probleme
	6.3 Zusammenfassung



Was ich reinbringen kann:



Kapitel:

6.1.1 Erweiterbarkeit um weitere Datenstruktur
	{Beim Teil der abzuändernden Dateien auch noch Beispielcode aus den beiden Dateien einfügen? Wär nicht viel im Vergleich zum Beispielcode einer ganzen Datenstruktur...}
	
	// Hinzuzufügende Dateien
	Um aufzuzeigen, wie eine weitere Datenstruktur grundsätzlich hinzuzufügen ist, wird nachfolgend erläutert, welche Dateien man hinzufügen sollte und welche Dateien angepasst werden müssen. Angenommen man fügt eine Datenstruktur mit dem Namen "XY" hinzu und hält die vorhandenen Namenskonventionen für die Dateien bei, so müsste man folgende Dateien hinzufügen:
			datastructures.XY, 
			datastructures.InfoXY, 
			builders.XYBuilder,
			commands.XYCommands.XYCommand, 
			visualization.XYVisualization,
			visualization.animationCreation.XYAnimation,
			Algorithms.XYAlgorithm
	Zu beachten ist hierbei, dass für jeden grundlegenden Befehl der Datenstruktur eine eigene Klasse, die von "XYCommand" erbt, im Ordner "commands" erstellt werden muss. So könnte noch, analog zu den bereits vorhandenen Datenstrukturen, bspw. "commands.CreateXY" oder "commands.InsertElementXY" hinzugefügt werden. 
	Sollen mehrere Algorithmen zur Klasse auswählbar und vorführbar sein, so ist auch hier für jeden dieser eine Klasse in "Algorithms" hinzuzufügen. Neben der bereits gelisteten Datei "Algorithms.XYAlgorithm", wären Beispiele hierfür "Algorithms.SortXYAlgorithm" oder "Algorithms.SearchXYAlgorithm".
	
	// Abzuändernde Dateien
	Was der Wartbarkeit des Programms sehr zugute kommt ist, dass beim Hinzufügen einer Datenstruktur nur zwei bereits existierende Dateien tatsächlich abgeändert werden müssen und das auch nur in geringem Maße. Diese beiden Dateien sind:
		abstractAlgorithm.AbstractAlgorithm
		model.ParentViewModel
	So ist in "AbstractAlgorithm" ein Attribut und eine Methode hinzuzufügen. Das Attribut ist der Builder, den man bereits als "builders.XYBuilder" erstellt hat. Dieses Attribut wird in der hinzuzufügenden Methode "create_XY" verwendet, welche dann wiederum in den von "AbstractAlgorithm" erbenden Algorithmen-Klassen genutzt werden kann. Soll die Datenstruktur mehr als eine Möglichkeit haben eine neue Instanz in den Algorithmen erzeugen zu können, so müssen gegebenenfalls weitere Methoden erstellt werden. 
	In "ParentViewModel" muss ein Attribut hinzugefügt und zwei Methoden erweitert werden. Hinzugefügt werden muss die in "visualization.XYVisualization" abgespeicherte Klasse zur Visualisierung. Bei den zu erweiternden Methoden sollten auch nur wenige Zeilen erforderlich sein. So muss "exeCommand" zusätzlich den Fall "XYCommand" abdecken und "resetVisualization" auch die als Attribut abgespeicherte Visualisierung für XY zurücksetzen.


6.1.2 Erweiterbarkeit der Bäume
	{auf die in 2.5 gelisteten Unterarten drauf zurückkommenhier gelisteten zurückkommen}
	
	\todo{welches Kapitel zeigt auf wie man eine Datenstruktur hinzufügen kann?}
	Es existieren viele verschiedene Arten von Bäumen mit verschiedenen Anforderungen und Eigenschaften. Beispielweise gibt es die sogenannten Rot-Schwarz-Bäume, bei denen, je nach Autor, jeder Knoten [1] oder jede Kante [2] entweder rot oder schwarz gefärbt ist. Um dies mit der Anwendung darzustellen, wäre es derzeit noch nötig entweder das vorhandene abzuändern oder eine neue Datenstruktur dafür einzufügen. Entscheidet man sich für letzteres, so müsste man zwar einige Dateien abändern und hinzufügen, so wie in Kapitel 6.? beschrieben, wobei das meiste von den bereits vorhandenen Bäumen adaptierbar ist. Um leicht Knoten zu erstellen, die rot oder schwarz einfärbbar sind, kann man eine neu erstellte Klasse für eben diese von den bestehenden Knoten erben lassen und noch das Attribut Farbe hinzufügen. Dabei ist es nicht wichtig, ob die Kanten oder die Knoten gefärbt werden sollen, denn die Kanten zu färben würde auf das gleiche Hinauskommen. Durch die Eigenschaften, dass jeder Kindknoten genau ein Elternteil hat, der Baum verbunden sein muss und keine doppelten Verbindungen bestehen, hat jeder Knoten, außer der Wurzel, genau eine Kante hat, die auf den Elternknoten verweist. Da jede Kante immer einen Eltern- mit einem Kindknoten verbindet, sind alle Kanten abgedeckt, wenn man das zu speichernde Attribut für die Kante schlichtweg im verbundenen Kindknoten speichert. Eine Ausnahme, die beachtet werden muss, bildet dabei die Wurzel. Durch diese Eigenschaften kann man den bestehenden Code durch Vererbung gut für weitere Bäume erweitern.
	
	[1] Cormen Seite 311 (331) Kapitel 13
	[2] Ottmann Seite 350 (369)


6.2 Bestehende Probleme
	
	// Allgemein
	Wie bereits gezeigt, wurde die Anwendung um einige Funktionalitäten erweitert. Jedoch bleiben zwei größere, bislang ungelöste Probleme bestehen. Diese wollen wir in diesem Unterkapitel aufzeigen und dazu mögliche Lösungsansätze präsentieren. 
	
	// Animationen für Löschoperationen
	Das erste Problem wurde durch das Hinzufügen der Animationen ersichtlich. Dabei handelt es sich um die Animationen jeglicher Löschoperationen. Die Problematik besteht darin, dass zum momentanen Stand zuerst die im tatsächliche Instanz der Datenstruktur geändert wird und daraufhin die visuellen Elemente erzeugt und die Animation erstellt wird. Soll nun eine Animation für eine Operation, die mindestens ein Element aus der Datenstruktur löscht, erstellt werden, ist es nicht möglich die originale Visualisierung des gelöschten Elements zu nutzen, da dieses Element zuvor gelöscht wurde. 
	// naiv umdrehen - verschiebt das Problem nur
	Zwar ist es möglich die Reihenfolge umzudrehen, bedeutet es würde zuerst visualisiert und animiert und daraufhin die im Hintergrund liegende Datenstruktur geändert werden, jedoch besteht dann ein analoges Problem bezüglich aller Operationen, die Elemente hinzufügen. 
	// immer neue visuelle Elemente erzeugen
	Ein erster tatsächlicher Lösungsansatz ist das gelöschte Element visuell neu zu erzeugen. Das heißt, das gelöschte Element wird im Hintergrund abgespeichert und übergeben, sodass von diesem eine visuelle Darstellung erzeugt werden kann. Dieser Ansatz stellt sich allerdings als umständlich und fehleranfällig heraus, da visuelle Abbilder etlicher Elemente erzeugt, richtig platziert und auch wieder richtig gelöscht werden müssen. Dennoch könnte diese Idee mit geschickter Umsetzung das Problem beheben ohne zu starke Nachteile aufzuweisen. 
	// sowohl vor als auch nach visualisierung animation zulassen
	Ein eventuell besserer Lösungsansatz wäre, dass nicht, wie oben beschrieben vor der Manipulierung der Datenstruktur die Visualisierung ansetzt, sondern diese sowohl davor als auch danach aufgerufen werden kann. Dies kann von Operation zu Operation einzeln entschieden werden, indem die Reihenfolge der Funktionsaufrufe in der Info-Datenstruktur getauscht wird. In {Abbildung 1} \todo{auf richtige Abbildung verweisen} ist dies anhand der fiktiven Datenstruktur "XY" verdeutlicht. Während in "addElement" zuerst das Element hinzugefügt und daraufhin erst die Visualisierung ausgeführt wird, so wie es im vorhandenen Programmcode derzeit bei allen Operationen der Fall ist, wird dies bei "deleteElement" durch einfach vertauschen der Zeilen andersrum ausgeführt. Für zukünftige potenziell komplexere Operationen könnte dies noch nicht ausreichend sein, da Operation vorstellbar sind, die bestenfalls sowohl vor als auch nach der tatsächlichen Änderung eine Visualisierung benötigen. In dem Fall wäre es möglich die Funktion wie in {Abbildung 2} \todo{auf richtige Abbildung verweisen} gezeigt zu schreiben. Hier sind zwei Visualisierungsfunktionen vorhanden, eine zum Ausführen vor der Änderungen, eine für nach der Änderung. Zu bemerken ist dabei, dass auf die tatsächliche Abfolge der Befehle in Kombination mit den Animationen zu achten ist, da die Befehle in der kompletten Visualisierung, wie in {Kapitel XY} \todo{auf richtiges Kapitel verweisen} beschrieben, durch Events der Animationen ausgelöst werden. Sind dementsprechende Änderungen allerdings vorgenommen worden, wäre nicht nur das Problem der Animationen für Löschoperationen gelöst, sondern zudem eine gute Grundlage für die Visualisierung zukünftig hinzugefügter Operationen geschaffen.
	
	// Justierung des Baums
	Das zweite Problem bezieht sich auf die Visualisierung der implementierten Bäume. Derzeit wird noch, wenn z.B. ein Knoten zum Baum hinzugefügt wird, der Knoten animiert hinzugefügt, der Rest des Baums allerdings auf einen Schlag positioniert. Dies verfehlt das eigentliche Ziel der Implementierung von Animationen. Zwar sind die einzelnen Schritte deutlich nachvollziehbarer, allerdings kann die Verständlichkeit vorallem bei größeren Neupositionierungen stark darunter leiden. Besser wäre es, würden diese Neupositionierungen der Knoten nicht in einem Schritt, sondern durch Bewegungsanimationen von Start- zum Zielpunkt ausgeführt werden.
	// Neupositionierung umsetzen
	Dies gut umzusetzen, kann sich als schwierig herausstellen. Ein erster Ansatz wäre es mithilfe der vorherigen und letztendlichen Koordinaten aller Knoten für jeden einzelnen Knoten eine Translationsanimation zu erstellen. Um alle diese Koordinaten zu speichern, ist es möglich vor der Ausführung der Operation zuerst alle Koordinaten abzuspeichern, dann die Operation auszuführen, die Koordinaten der Knoten neu zu berechnen und diese, vor dem Erstellen der Visualisierung, zusätzlich abspeichern. Die Erstellung der einzelnen Animationen ist hierbei nicht mehr schwierig. Allerdings darf die Änderung durch die getätigte Operation, wie bspw. ein geändertes Element, zum Start der Visualisierung noch nicht sichtbar sein. Entweder es wird hierfür eine generelle Lösung oder die Visualisierung muss umständlich bei jedem Befehl individuell manipuliert werden. Eine naive generelle Lösung wäre die Operation zunächst rückgängig machen und daraufhin nochmal aufrufen. Dies erscheint jedoch als umständlich und sollte, wenn möglich, vermieden werden. Abseits dessen bleiben die Kanten des Baums weiterhin ein Problem, da sie trotz unterschiedlich weiten Bewegungen von Elternknoten und Kindknoten passend mitbewegt werden sollten. 
	// Mit vorherig beschriebenen "Reihenfolge Manipulierung Visualisierung" verbinden
	Wurde eine Umsetzung für das Justieren des Baums gefunden und die Aufrufe der "Info-Datenstruktur" wie zuvor beschrieben angepasst, sodass sowohl vor als auch nach der Änderung der Datenstruktur eine Visualisierung aufrufbar ist, so wäre es möglich den Baum mit der ersten Animation zunächst passend zu justieren und danach mit einer zweiten Animation die Operation, wie das Hinzufügen eines Blatts, zu visualisieren.




\todo{write caption and label}
\begin{lstlisting}[language=Java, caption={}\label{Abbildung 1}]
	public class InfoXY {
		// ...
		public void addElement() {
			// ...
			// add the element
			this.xyContent.addElement();
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.addElementVisualization(this);
			}
		}
		public void deleteElement() {
			// ...
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.deleteElementVisualization();
			}
			// delete the element
			this.xyContent.deleteElement();
		}
		// ...
	}
\end{lstlisting}

\todo{write caption and label}
\begin{lstlisting}[language=Java, caption={}\label{Abbildung 2}]
	public class InfoXY {
		// ...
		public void complexOperation() {
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.complexVisualizationBefore();
			}
			// execute the command
			this.xyContent.complex();
			// visualize the command
			if (this.xyVisualization != null) {
				this.xyVisualization.complexVisualizationAfter();
			}
		}
		// ...
	}
\end{lstlisting}

