

Teil der Gliederung:
	2 Datenstruktur: Baum 6 (6)
		2.1 Terminologie 9 (1)
		2.2 Definition 6 (1)
		2.3 Eigenschaften 12 (1)
			2.3.1 Vorteile
			2.3.2 Nachteile
		2.4 Verschiedene Arten von Bäumen 10 (2)
			2.4.1 Binärbaum
			2.4.2 Rot-Schwarz-Bäume ? (weil es besonders ist, dass die gefärbt sind)
			2.4.3 ...
		2.5 Zusammenfassung 13 (1)

	3 Algorithmen auf Bäumen 14 (4)
		3.1 Atomare Operationen 14 (3)
			3.1.1 Einfügen
			3.1.2 Löschen
			3.1.3 Rotieren
			3.1.4 ...
		3.2 (spezifische) Algorithmen auf Bäumen 17 (1)



Was ich reinbringen kann:
	- 3.1 / 3.2 Laufzeiten gewisser Operationen / Algorithmen
	- Generell: Grafiken
	- Generell: Auf gesagtes zurückkommen
	- 2. Alles von Wikipedia kurz angeschnitten, was nicht in 2.1-2.5 auftaucht 
	- Wo Bäume verwendet werden? ZB bei Ordnerstrukturen auf PC
	- Grafik, in der veranschaulicht wird, wie etwas aus der "echten" Welt als Baum dargestellt wird
		- Güting Dieker S. 92 (106) / 93 (107)
	- Selbstgemachte Grafik a la "was ist ein Baum, was nicht"?
	- {"Bäume werden üblicherweise von oben nach unten, mit dem Wurzelknoten an oberster Stelle, gezeichnet. Dabei hat jeder Knoten, außer der Wurzelknoten, genau ein Elternknoten und kann mehrere Kindknoten haben" Hier rein oder in "Terminologie"?}
	- Allgemeine Quellen:
		- Cormen
		- Güting Dieker S. 92 (106) / 101 (115)
		- Andere Bücher
		- https://de.wikipedia.org/wiki/Baum_(Datenstruktur)#Terminologie
		- https://en.wikipedia.org/wiki/Tree_(data_structure)
	- kurz erklären was ein "Binärbaum" bzw ein k-närer Baum ist
	


Kapitel:

2
{Üblicherweise von oben, mit der Wurzel am Anfang, nach unten gezeichnet}
{hier eine unausreichende Quelle https://runestone.academy/ns/books/published/pythonds/Trees/VocabularyandDefinitions.html , https://blog.masaischool.com/tree-data-structure-types-operations-applications/ , https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm}

2.1 Terminologie
	{Selbstgemachte Grafik, in der an einem Baum die ganzen Sachen beschriftet ist?}
	{Quellen: https://de.wikipedia.org/wiki/Baum_(Datenstruktur)#Terminologie,  
			  https://en.wikipedia.org/wiki/Tree_(data_structure)#Terminology,
			  Cormen Seite 1186 / 1187 bzw 1206 / 1027}
	{Cormen erwähnen?}
	
	Die genutzten Begriffe sind von Quelle zu Quelle oft leicht unterschiedlich, können aber auch stark von anderen abweichen. Es werden die folgenden Begriffe mit zugehöriger Bedeutung wie folgt verwendet:
	
	Liste:
		Knoten - Element im Baum
		Kanten - Verbindung zwischen zwei Knoten
		Wurzelknoten - Festgelegter Startknoten
		Abstand - Kürzester Weg, also niedrigste Anzahl an Kanten, zwischen zwei Knoten (wobei bei einem Baum, ohne doppeltes Begehen von Kanten, der kürzeste Weg zwischen zwei Knoten auch immer der einzige Weg ist)
		Tiefe (eines Knotens) - Abstand zur Wurzel
		Tiefe (eines Baums) - Maximaler Abstand von der Wurzel zu einem Blattknoten
		Ebene - Alle Knoten einer Tiefe
		Kindknoten (von betrachtetem Knoten) - Knoten, der genau eine Ebene unter dem betrachteten Knoten steht, also eine um eins größere Tiefe hat, und mit ihm verbunden ist
		Elternknoten (von betrachtetem Knoten) - Knoten, der genau eine Ebene über dem betrachteten Knoten steht, also eine um eins kleinere Tiefe hat, und mit ihm verbunden ist
		Vorfahre (von betrachtetem Knoten) - Knoten, der auf dem Pfad zwischen der Wurzel und dem betrachteten Knoten ist, wobei die Wurzel mit eingeschlossen, der betrachtete Knoten jedoch ausgeschlossen ist
		Nachfahre (von betrachtetem Knoten) - Knoten, bei dem der betrachtete Knoten ein Vorfahre ist
		Blattknoten - Knoten ohne Kindknoten
		Innerer Knoten - Knoten, der kein Blattknoten ist
		Geschwister - Zwei Knoten, die den selben Elternknoten haben
		Teilbaum - Eine Teilmenge des Baums, wobei jeder Knoten als Wurzel des Teilbaums betrachtet werden kann und dieser mit seinen Nachfahren den benannten Teilbaum bildet
		Grad (eines Knotens) - Anzahl der Kinder
		Grad (eines Baums) - Höchster Grad eines Knotens im Baum
		Balanciert - Ein Baum ist balanciert, wenn die Differenz der jeweiligen Tiefe zweier beliebiger Blätter maximal eins ist
		Breite (einer Ebene) - Anzahl Knoten der Ebene
		Breite (eines Baums) - Maximale Breite einer Ebene im Baum
		Wald - Bäume mit disjunkten Knotenmengen
	
	
2.2 Definition
	{Quelle: Dieker Güting Seite 102 (116)}
	
	Eine Definition von Bäumen (nach Dieker Güting) wäre:
		(i) Ein einzelner Knoten x ist ein Baum.
		(ii) Wenn x ein Knoten ist und T_1,..., T_k Bäume sind, dann ist auch das (k+1)-Tupel (x, T_1,..., T_k) ein Baum.
	Das bedeutet, hat man mehrere Bäume, die nicht miteinander verbunden sind (also einen Wald), kann man durch das Erstellen eines neuen Knotens y, der für sich auch bereits ein Baum ist, und dem Hinzufügen als Kindknoten der Wurzeln der Bäume an y, einen einzelnen Baum mit der Wurzel y kreieren.
	
	
2.3 Eigenschaften
	{Quelle bisher https://in.indeed.com/career-advice/finding-a-job/what-is-tree-data-structure}
	{Eine nicht-lineare Datenstruktur}
	{Natürlicherweise eine Hierarchie in den Daten}
	{Kann, abhängig vom konkreten Baum, bessere Laufzeiten in gewissen Operationen, vorrangig dem Suchen, haben, als bei linearen Datenstrukturen. Dies kann erreicht werden, da bei großen Mengen an Daten zB Suchoperationen bei verketteten Listen oder Arrays immer langsamer werden, während die Suche in einem Baum durch geschickte höhere Platzierung bedeutenderer Knoten, die Suchzeit verbessert werden kann.}





Zeug aus Cormen (ab S.1184 [1204])
	- Ein "freier Baum" ist ein zusammenhängender azyklischer ungerichteter Graph. Nachfolgend wird der Einfachheit halber das Adjektiv "frei" weggelassen. {Abbildung B.4 (a) & (c)}
	- Theorem B.2 (denke nicht, dass ich davon was nochmal aufgreifen kann)
	- Ein "gerichteter Baum" ist ein Baum, bei dem ein Knoten ausgezeichnet ist. Dieser Knoten wird "Wurzel" genannt. {Abbildung B.6 (a)}
	- Terminologie: Vorfahre (echter Vorfahre), Nachfahre (echter Nachfahre), Vater, Kind, Geschwister, Blatt, innerer Knoten, Grad, Tiefe eines Knotens, Ebene, Höhe eines Knotens, Höhe eines Baumes, geordneter Baum, binärer Baum, leerer Baum, vollständiger binärer Baum, k-närer Baum








3 Algorithmen auf Bäumen
	{atomaren Funktionen nennen und warum die ausreichen}
		
3.? Verschiedene Speicherungsweisen von Bäumen
	{kurz erwähnen, dass es noch weitere gibt: fib heap als liste oder wie auch immer? muss ich noch recherchieren}
	{- Darstellung von Bäumen: 
		- linkes kind rechtes Kind, 
		- linkes-Kind-, rechter-Bruder-Darstellung (Cormen 248 (268)) (einfach gelinkte Liste)
		- andere Darstellungen (auch Cormen ab 248 (268))}
	
	// Arten Bäume abzuspeichern
	Möchte man Bäume als Datenstruktur implementieren, stellt sich die Frage, auf welcher Weise man diese, insbesondere die Kindknoten der Knoten, abspeichert. Geht man bspw. nur mit Binärbäumen um, wäre ein einfacher Ansatz, dass jeder Knoten ein Element "linker Kindknoten" und ein Element "rechter Kindknoten" speichert. Damit wäre zudem auch direkt gewährleistet, dass jeder Knoten maximal zwei Kindknoten hat [1]. Bäume mit beschränktem, aber festen Grad, wie Trinärbäume, können analog umgesetzt werden. Doch ist dies bei höherem Grad wegen fehlender Übersichtlichkeit nicht zu empfehlen und es ist keine Lösung für Bäume mit beliebigem Grad. Eine effiziente Lösung für diese Herausforderung bietet die "linkes-Kind-, rechter-Bruder-Darstellung" [2]. Hierbei speichert jeder Knoten nur eins seiner Kindknoten ab, und zwar das, was am weitestens links steht. Dies ist das "linke Kind". Dazu kann jeder Knoten allerdings auch seinen "rechten Bruder", also der Geschwisterknoten, der einen Platz weiter rechts von ihm liegt, abspeichern. Bei der Wurzel muss dieser "rechte Bruder" natürlich in jedem Fall "null" sein.
	
	[1] Cormen Seite 246-248
	[2] Cormen Seite 248
	

3.1 Atomare Operationen
	
	

3 Algorithmen auf Bäumen 14 (4)
		3.1 Atomare Operationen 14 (3)
			3.1.1 Einfügen
			3.1.2 Löschen
			3.1.3 Rotieren
			3.1.4 ...
		3.2 (spezifische) Algorithmen auf Bäumen 17 (1)
