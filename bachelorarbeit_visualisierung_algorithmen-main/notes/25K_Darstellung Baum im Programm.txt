

4 Darstellung Baum im Programm 18 (2)
		4.1 Problematik 18 (1)
		4.2 balanciert vs unbalanciert 19 (1)



Was ich reinbringen kann:


Kapitel:

4 Darstellung Baum im Programm


4.? Art der Abspeicherung
	{linkes kind rechter bruder wird verwendet}


4.? Animationen der atomaren Funktionen


4.? "Algorithmen" zum testen
	
	// TreeCompleteK_nary und TreeRandom
	{TODO Die Namen und Bezeichnung (Klasse, Funktion, whatever) anpassen, je nach dem wie es jetzt heißt oder was es nun ist}
	Um Bäume mit beliebiger Anzahl Knoten leicht zu erzeugen, welche sich besonders für das Austesten des Programms oder geschriebener Algorithmen eignen, wurden zwei Algorithmen hinzugefügt. Der erste ist "TreeCompleteK_nary" mit dem es ermöglicht wird einen k-nären Baum, heißt ein Baum mit Grad k, mit n Knoten zu erzeugen. Dabei kann k, so wie die Anzahl Knoten n, beliebig bestimmt werden. "TreeRandom" ist der zweite Algorithmus. Dieser erstellt einen zufälligen Baum mit n Knoten.


4.? Algorithmus zum Baum visualisieren 
	{Ebenen und Knotennamen in die Grafiken zeichnen?}
	
	// Anders als bei den anderen Visualisierungsklassen
	Die Art der Visualisierung der Bäume ist struktuell anders implementiert als die für die anderen bisherigen Datenstrukturen. Bei den anderen Datenstrukturen werden je nach Befehl die betroffenen Elemente als javafx Knoten erstellt, geändert oder gelöscht und dies in einer Liste von javafx Elementen gespeichert, welche letztlich zusammen gezeichnet werden. Stattdessen gibt es nun einen Befehl um die Koordinaten jedes Knotens zu bestimmen und einen weiteren Befehl, der den vorhandenen Baum mit abgespeicherten Koordinaten in den Knoten, zeichnen kann. Diese Umstellung war nötig, um einen übersichtlichen Baum zu erhalten, da sich die räumliche Anordnung der Knoten des Baums deutlich häufiger als bei den bestehenden Datenstrukturen wie Arrays der Fall ist. 
	
	// Wie die Positionen der Knoten bestimmt werden
	Die Funktion zur Berechnung der Positionen der Knoten geht folgendermaßen vor:
		1. Alle Blätter des Baums auf unterster Ebene mit vorgegebenem Abstand platzieren.
		2. Alle Knoten der nächsthöheren Ebene betrachten und wie folgt verfahren:
			2a. Ist der Knoten ein Blatt, so setze seine y-Koordinate auf die y-Koordinate der derzeitigen Ebene. Die x-Koordinate stimmt bereits, da das Blatt zunächst auf unterster Ebene platziert wurde.
			2b. Ist der Knoten kein Blatt, so bestimme sein mittleres Kind und setze seine x-Koordinate auf die des mittleren Kinds. Hat der Knoten eine gerade Anzahl an Kindern, so gibt es zwei mittlere Kinder und stattdessen wird das Mittel der x-Koordinaten der beiden genommen.
		3. Wiederhole Schritt 2 bis alle Ebenen abgearbeitet wurden.
	Hiermit ist nicht die für den Nutzer sichtbare Visualisierung gemeint, sondern das Berechnen der Positionen der Knoten, welches vor jedem Zeichnen des Baums ausgeführt wird.
	
	// Anhand von Grafiken ausführen
	{TODO Grafiken einfügen und die Beschriftungen richtig setzen}
	Unter "TreeDemo.java" ist in der Anwendung ein Baum zu finden, welcher nun als Beispiel betrachtet wird um den vorangegangenen Algorithmus veranschaulichen zu können. Angenommen es liege nun dieser Baum {TODO Abbildung 1 "4 tree positioning drawn"} im Programm vor und die Knoten hätten noch keine Koordinaten zugewiesen um den Baum vernünftig visualisieren zu können. Wenn nun der Algorithmus zum Positionieren der Knoten aufgerufen wird, wäre nach dem oben beschriebenen ersten Schritt das Zwischenergebnis {TODO Abbildung 2 "4 tree positioning drawn"}, vorausgesetzt man visualisierte die Knoten an dieser Stelle. Alle Blätter des Baums wurden auf der untersten Ebene platziert. Wird daraufhin der zweite Schritt ausgeführt, werden, wie in {TODO Abbildung 3 "4 tree positioning drawn"} erkennbar, die Positionen der Blätter 5, 7 und 10 aktualisiert und die Knoten 6, 8 und 9 genau über ihrem jeweils einzigen Kind platziert. Als nächstes wiederholt sich Schritt zwei, wodurch nun die zweite Ebene betrachtet wird und somit auch die Position von Blatt 4 aktualisiert wird. Weiterhin werden Knoten 1, 2 und 3 eingefügt. Während Knoten 3 nur ein Kind hat und deswegen genau über eben diesem platziert wird, ist das bei Knoten 1 und 2 anders. Knoten 1 wird genau über dem mittleren Kind, also Knoten 6 platziert. Die Positionen der Knoten 5 und 7 werden nicht in die Berechnung mit einbezogen. Knoten 2 hat zwei mittlere Kinder, wodurch die x-Koordinate von Knoten 2 genau zwischen diesen platziert wird. Im dritten und damit auch letzten Aufruf von Schritt zwei wird die erste Ebene betrachtet und der Wurzelknoten hinzugefügt ({TODO Abbildung 4 "4 tree positioning drawn"}). Da dieser eine gerade Anzahl an Kindknoten hat, werden nur die mittleren beiden, Knoten 2 und 3, betrachtet um die x-Koordinate der Wurzel zu berechnen. 
	