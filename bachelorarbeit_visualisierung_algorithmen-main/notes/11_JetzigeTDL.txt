

11. Weiterschreiben!!!
    - "Datenstruktur: Baum" Kapitel schreiben
        [ ] 2.1 Definition (3)
        [ ] 2.2 Terminologie (1)
        [-] 2.3 Verschiedene Arten von Bäumen (2)
            [-] 2.3.1 Binärbaum
            [-] 2.3.2 ...
        [-] 2.4 Eigenschaften (1)
            [-] 2.4.1 Vorteile
            [-] 2.4.2 Nachteile
        [-] 2.5 Zusammenfassung (1)
    - "Erweiterung der Darstellung" Kapitel schreiben
        [X] 5.1 Animationen an den bestehenden Datenstrukturen (4)
            [-] 5.1.1 Variablen
            [X] 5.1.2 Array
            [-] 5.1.3 Liste
        [ ] 5.2 Zoomen & Bewegen (?)
    - "Implementierung" Kapitel schreiben
        [-] 6.1 Ablauf und Organisation (1)
        [ ] 6.2 Änderungen am bestehenden Code (2)
            - Auch auf Bugfixes im bestehenden Code eingehen
        [ ] 6.3 Herausforderungen und Umsetzung (2)
        [-] 6.4 Zusammenfassung (1)
    - Generelle Vorgehensweise:
        - Zunächst Plan machen, also Unterkapitel was geschrieben werden muss und in welcher Reihenfolge


12. Über Zeichnen Gedanken machen
    - "drawing trees" suchen, ob es dazu was im internet gibt
        - Mit Kräfte und Differentialgleichung?
        - Von unten nach oben?
    - Meine Ideen:
        - Schauen wie viel Ebenen es gibt und dementsprechend passende Abstände berechnen
            - Positionen so, als wäre es immer vollständiger Graph


13. Animieren...
    - ... wie man auf die Sachen zugreift (get animationen, die automatisch in gewissen Operationen passieren)
    - ... interagieren zwischen zwei Instanzen von Datenstrukturen
        - Beispiel: Ein Element wird von einem Array in ein freies Feld eines anderen Arrays geschoben



21. Wenn noch Zeit ist:
    - Atomare Operationen:
        - Blatt anhängen
        - Elternpointer umhängen können
        - Blatt löschen
        - Wert eines Knotens ändern


22. Animationen
	- deleteExperiment klappt nicht (wahrscheinlich auch deleteElement nicht), da die Sachen zuerst gelöscht werden, bevor die Animationen durchlaufen können
		- Lösungsvorschlag:
			Idee 1: das tatsächliche Löschen als atEnd Event (oder wie auch immer) der Animation aufrufen
			Idee 2: irgendwie ein Event bauen, das beim Ende der Animation aktiviert wird und dabei das Element löscht
				- Problem bei beiden: könnte leicht bei zu schnellen Eingaben zu Fehlern kommen. Vielleicht kann ich es wirklich rein visuell halten?
	- animation für "get" funktionen erstellen



31. Config
	- richtige Config statt Java Klasse nutzen
		https://stackoverflow.com/questions/16273174/how-to-read-a-configuration-file-in-java
		


41. Work off ToDo's









Wenn-zu-viel-Zeit-TDL:

	11. Refactoring
	- wiederholtes "if visualization != null..." in den visualization klassen (?) zu einer funktion
	
	21. Zoomen
		- Button zum Zurücksetzen des Zooms (erst mit dem "TerminateButton" testen)
	
	22. Dragging
		- Button zum Zurücksetzen der Translation
		
	23. Complete Visualization
		- Button um direkt zum Endergebnis zu springen
		- Button um Pause zu drücken
	
	24. Animationen
		- Animationen schneller oder langsamer zur Laufzeit machen können.

	41. ScrollPane entfernen und stattdessen anderen Knoten, zb normales Pane, welcher aber nur die feste Größe als Fenster anzeigt
		- Lösung: (etwas unschön, da weiterhin ScrollPane)
			<ScrollPane  minWidth="500" fx:id="algVisScrollPane"
						 hmax="0" vmax="0" hbarPolicy="NEVER" vbarPolicy="NEVER">
	
