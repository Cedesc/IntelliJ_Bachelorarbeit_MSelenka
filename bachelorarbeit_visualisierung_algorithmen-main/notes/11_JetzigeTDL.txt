

CHECK! 11. Weiterschreiben!!!


CHECK! 12. Bäume implementieren und Zeichnen ermöglichen
	CHECK! - Restliche atomare Operationen implementieren
		CHECK! - Elternpointer umhängen können
		CHECK! - Blatt löschen
		CHECK! - Wert eines Knotens ändern
	CHECK! - get Commands hinzufügen
	CHECK! - back command (sollte genau so schwer sein wie "Blatt löschen" oder "Baum löschen")
	CHECK! - repeat visualization und change visualization fixen
	CHECK! - MyNode "value" von int zu allgemeinen Typ machen
	CHECK! - indizes unique machen
    Weiteres:
		- Animation für die atomaren Operationen
		- Wurzel darf nicht rightBrother haben
		- beim visualisieren bewegt sich der scheiß automatisch nach rechts bzw links
			- immer wieder richtig rücken?
			- liegts am scaling?


13. Animieren...
    CHECK! - ... wie man auf die Sachen zugreift
    - ... interagieren zwischen zwei Instanzen von Datenstrukturen
        - Beispiel: Ein Element wird von einem Array in ein freies Feld eines anderen Arrays geschoben
	- generell Animationen für die Operationen
		- man braucht nach dem draw befehl die Koordinaten von zuvor
			- deepCopy vom Baum erstellen um die Positionen der Knoten zu haben und das nutzt man als Referenz für die Animationen???
		- Schwierigkeit: Kanten
			- verschwindet, dann werden Knoten bewegt und taucht an der richtigen Stelle wieder auf
	Weiteres:
		- automatisch ausgeführte get Animationen bei gewissen Befehlen einfügen (?)



21. Weiterschreiben
	- UML Diagramm für Bäume? Und Sequenzdiagramm für visualisierung mit drawBefehl für Bäume?
	- Sequenz-Diagramme (siehe 23K_Erweiterung der Darstellung)



31. Config
	- richtige Config statt Java Klasse nutzen
		https://stackoverflow.com/questions/16273174/how-to-read-a-configuration-file-in-java
		


41. Work off ToDo's
















Wenn-zu-viel-Zeit-TDL:

	11. Refactoring
		- wiederholtes "if visualization != null..." in den visualization klassen (?) zu einer funktion

	12. Animationen
		- deleteExperiment klappt nicht (wahrscheinlich auch deleteElement nicht), da die Sachen zuerst gelöscht werden, bevor die Animationen durchlaufen können
			- Lösungsvorschlag:
				Idee 1: das tatsächliche Löschen als atEnd Event (oder wie auch immer) der Animation aufrufen
				Idee 2: irgendwie ein Event bauen, das beim Ende der Animation aktiviert wird und dabei das Element löscht
					- Problem bei beiden: könnte leicht bei zu schnellen Eingaben zu Fehlern kommen. Vielleicht kann ich es wirklich rein visuell halten?
		- animation für "get" funktionen erstellen
	
	21. Zoomen
		- Button zum Zurücksetzen des Zooms (erst mit dem "TerminateButton" testen)
	
	22. Dragging
		- Button zum Zurücksetzen der Translation
		
	23. Complete Visualization
		- Button um direkt zum Endergebnis zu springen
		- Button um Pause zu drücken
		- automatisches Skalieren bei complete visualization (bei Bäumen gut zu beobachten)
	
	24. Animationen
		- Animationen schneller oder langsamer zur Laufzeit machen können.

	41. ScrollPane entfernen und stattdessen anderen Knoten, zb normales Pane, welcher aber nur die feste Größe als Fenster anzeigt
		- Lösung: (etwas unschön, da weiterhin ScrollPane)
			<ScrollPane  minWidth="500" fx:id="algVisScrollPane"
						 hmax="0" vmax="0" hbarPolicy="NEVER" vbarPolicy="NEVER">
	
