

1 Einleitung
			- grundlegende Einleitung
	1.1 Motivation 
	1.2 Zielsetzung 
	1.3 Strukturierung des Inhalts der Arbeit 



Was ich reinbringen kann:


Kapitel:

1 Einleitung
	{"Dabei wurde versucht möglichst am Vorgänger anzuknüpfen, sodass der Code kohärent erscheint" (was bei Visualisierung, siehe "4.? Algorithmus zum Baum visualisieren" nicht geklappt hat, wird aber auch dort erklärt warum). Außerdem möglichst Kapselung, wie das zoomen, bewegen und die animationen, sodass die außerhalb der visualisierungsklassen stehen (zwar braucht jetzt wegen der complete visualization alles eine animation, in fällen von noch-keiner-vorhanden wird aber eine "leere animation" erzeugt.) - Das alles hier rein oder woanders? Steht es schon woanders?}
	{- Im Allgemeinen bieten besonders Baume die M ¨ oglichkeit, den internen Aufbau der Datenstruktur in unterschiedlichster Weise zu ¨gestalten. Dies erlaubt sehr effiziente Zugriffsmechanismen. [Hubwieser 245 (261) Kapitel 21 Bäume]}
	{- Bäume gehören zu den wichtigsten in der Informatik auftretenden Datenstrukturen. Entscheidungsbäume, Syntaxbäume, Ableitungsbäume, Kodebäume, spannende Bäume, baumartig strukturierte Suchräume, Suchbäume und viele andere belegen die Allgegenwart von Bäumen. [Ottmann 259 (278) Kapitel 5 Bäume]}

1.1 Motivation
	{dieses "vorige" Version streichen, lieber "bisheriger?", weils in dem Zeitpunkt von vor der arbeit geschrieben wurde?}

	// Was bisher geschah
	In der vorigen Version bot die Anwendung die Möglichkeit Arrays, Listen und Variablen zu visualisieren. Jedoch existieren noch einige weitere Datenstrukturen, für die eine Visualisierung interessant wäre. 
	
	// Bäume sind voll toll
	Eine dieser ist die Datenstruktur Baum. Dank mehrerer nützlicher Eigenschaften, werden Bäume sehr häufig angewandt, wie zB beim Verwalten von Daten oder für effizientes Suchen eines Elements. Mit zahlreichen Unterarten, wie B-Bäumen oder Rot-Schwarz-Bäumen, gehören Bäume zu den wichtigsten Datenstrukturen in der Informatik. 
	
	// Bäume visualisieren ist toll
	Allerdings können sich komplexere Operationen auf Bäumen für Programmieranfänger als schwierig nachzuvollziehen herausstellen, da sich durch die, im Vergleich zu Arrays und Listen, komplexere Struktur mehr zu beachtende Eigenschaften ergeben. Durch die Wichtigkeit von Bäumen, bietet es sich an die Anwendung um diese zu erweitern. Eine Visualisierung von Bäumen und darauf ausgeführten Algorithmen kann die Verständlichkeit enorm erhöhen.
	
	// Was ohne Animationen Kacke ist
	Durch das Visualisieren von Bäumen würde jedoch ein Schwachpunkt der Anwendnung sehr offensichtlich. Dieser Schwachpunkt ist das in manchen Fällen schwierige Nachvollziehen einer getätigten Operation in der gezeigten Datenstruktur. Durch die Zwangsläufige visuelle Neujustierung des Baums bei fast allen Operationen, kann es sich z.B. schnell als schwer herausstellen in der visualisierten Datenstruktur zu erkennen welcher Knoten an welchen anderen Knoten angehangen wurde. Dieses Problem war bereits in der vorherigen Version vorhanden, wenn ein Element mitten in einem Array hinzugefügt oder gelöscht wird, allerdings wird es durch die strukturell komplexeren Bäume deutlich größer. 
	
	// Animationen yey
	Eine Lösung hierfür schaffen Animationen. Ein gut nachvollziehbarer visueller Übergang zwischen der Ausgangslage und dem Endbild kann die komplette Verständlichkeit deutlich erhöhen. Bereits bei einfachen Operationen kann der Nutzer die gezeigte Änderung deutlich einfacher und angenehmer aufnehmen. 
	
	// Was ohne Zoomen und Bewegen Kacke ist
	Eine weitere Problematik ist, dass bei zahlreichen oder größeren Instanzen der Datenstrukturen, die Datenstrukturen über das gezeigte Fenster hinausragen. Dabei ist es in der vorigen Version nicht möglich die Datenstrukturen, die teilweise oder komplett außerhalb des gezeigten Fensters liegen, anzeigen zu lassen. Besonders mit dem Hinzufügen von Bäumen, die schon bei wenigen Elementen beträchtlichen Platz einnehmen müssen, kommt dieses Problem häufiger vor. 
	
	// Zoomen und Bewegen yey
	Die Möglichkeit das Bild zu zoomen und die gezeigten Datenstrukturen zu bewegen löst dieses Problem. Damit ist es sowohl möglich Gesamtlage oder einzelne genaue Bereiche im Auge zu behalten. 


	// Wad mach isch denn doa
	Nachfolgend wird die Erweiterung der Anwendung um Bäume, Animationen und dem Zoomen und Bewegen im Fenster behandelt. 
	
	// Ziele
	Das Zoomen und Bewegen sollen parallel und ohne gegenseitige Beeinflussung mit den Animationen möglich sein, sodass der Nutzer auch während laufender Animationen frei durch das Bild navigieren kann ohne dabei Fehler hervorzurufen. Animationen sollten für den Nutzer leicht nachvollziehbar gestaltet sein. Weiterhin sollten Animationen für zukünftig hinzugefügte Datenstrukturen implementierbar sein, ohne dass andere, von der Datenstruktur unabhängige, Dateien dafür verändert werden müssen. Bei den Bäumen ist zu beachten, dass diese eine allgemeine Variante darstellen sollen. Das bedeutet, dass es zukünftig möglich sein soll spezielle Bäume hinzuzufügen, die von dem allgemeinen Baum erben können sollen, um so das Hinzufügen zu erleichtern und die Bäume einheitlich zu halten.


1.2 Zielsetzung
	{
		// Bäume
		Allgemeine Bäume wurden als weitere Datenstruktur zur Anwendung hinzugefügt. Die in PLATZHALTER \todo{Verweis auf "2.? Atomare Funktionen"} beschriebenen atomaren Funktionen und Zugriffsoperationen wurden hinzugefügt. Es wurde ein Weg gefunden Bäume zuverlässig einheitlich zu visualisieren, ohne dass unnatürliche Abstände oder unübersichtliche Anordnungen entstehen. Bäume können durch die Operationen und die besagte Visualisierung bereits vollumfänglich genutzt werden. 
		// Animationen
		Für das Erstellen erster simpler Animationen wurde die Datenstruktur "ArrayList" hinzugefügt, welche zwar kompakt ist, dafür allerdings stabil läuft. Für "ArrayList" wurden jeweils für die Befehle des Erstellens einer Instanz von "ArrayList", des Einsetzens eines Element und des Tauschens zweier Elemente Animationen hinzugefügt. Bei den Bäumen wurden Animationen für das Erstellen einer Instanz, das Hinzufügen eines Blatts, das Ändern eines Werts und Zugriffsoperationen hinzugefügt. Was an dieser Stelle bislang noch nicht funktioniert sind generell Animationen für Löschoperationen. Außerdem haben Bäume noch nicht die Möglichkeit sich automatisch zu justieren. Insgesamt konnte durch das Hinzufügen von Animationen eine bessere Nachvollziehbarkeit des Programms erreicht werden.
		// Zoomen & Bewegen
		Es wurde die Möglichkeit implementiert die dargestellte Datenstruktur zu vergrößern oder auch zu verkleinern. Dieses Zooming wird mit dem Mausrad ausgeführt und zoomt relativ zur Mausposition. Der maximale und minimale Grad des Zooms kann in der Config-Datei angepasst werden. Außerdem kann sich mit der Maus durch das Bild bewegt werden. Die Bewegung durch das Bild und Zoomen zum oder aus dem Bild kann gleichzeitig mit abgespielten Animationen genutzt werden. 
	}




Abstrakt:
	{
	Die vorliegende Arbeit befasst sich mit der Erstellung eines Programmes zur Visualisierung von Datenstrukturen. Diese Anwendung mit dem Namen Älgorithm Visual Studioërmöglicht die Erstellung von benutzerdefinierten Algorithmen auf klassischen Datenstrukturen wie Variablen, Arrays und verketteten Listen. Der Benutzer bindet eigene Algorithmen dynamisch in das Programm ein. Durch eine ausgearbeitete Struktur kann die Operationsliste und zugehörige Visualisierung eingesehen werden. Dabei werden vorgefertigte Methoden benutzt, die im Hintergrund die Darstellung und Manipulation der Daten übernehmen.
	Um die zuvor genannten Aspekte in einer Software zu verwirklichen, wurden zunächst das Anforderungsdokument und eine allgemeine graphische Oberfläche in Form von Mockups erstellt. Aus diesen beiden bildete sich eine detaillierte Strukturierung und ein Aufbau der Software durch UML-Diagramme. Zusammen mit den theoretischen Grundlagen der verwendeten Datenstrukturen dienten alle Komponenten als Vorlage und Hilfsmittel für die nachfolgende Implementierung. 
	Das Programm ist durch seine Struktur darauf ausgelegt, zukünftige Erweiterungen und neue Datenstrukturen aufzunehmen. Die erfolgreiche Umsetzung des erarbeiteten Konzepts wird in den kommenden Kapiteln beschrieben.
	}
