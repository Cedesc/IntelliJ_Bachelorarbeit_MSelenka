

Atomare Operationen:

	- Get Wurzel
		- input: -
		- output: Node wurzelknoten
		- Visualisierung:
			Ideen:
				1. Nichts
				2. Pulsieren der Wurzel
				
	- Nach Knoten mit bestimmten Wert suchen
		- input: Value zuSuchenderWert Node wurzelknoten
		- output: Node gesuchterKnoten
		- Weiteres:
			- Aber auf welche Weise? Tiefen-, Breitensuche?
		- Visualisierung:
			Ideen:
				1. Jedes Element, das betrachtet wird, pulsiert kurz bis das gesuchte Element gefunden wird, dieses pulsiert zb nochmals stärker
				2. Das gesuchte Element pulsiert
	- Element an bestimmter Stelle hinzufügen
		- input: Node elternknoten , Int wievieltesKind , Node neuerKnoten
		- output: - / Boolean
		- Weiteres:
		    - Wenn ein Knoten hinzugefügt werden soll, der die derzeitige Wurzel als Kind haben soll, kann man bspw. für den Elternknoten "None" eingeben
		- Visualisierung:
			Nach oben Reinfaden des Elements
	- Teilbaum löschen
		- input: Node zuLöschenderKnoten
		- output: - / Boolean
		- Visualisierung:
			Nach unten Rausfaden


Nicht atomar (?):

	- Get Minimum / Maximum
	- Get Vorgänger / Nachfolger
	- Get Tiefe
		- input: Node wurzelknoten
		- output: Int tiefe
			Ideen:
				1. Nichts
				2. Jedes Element, das betrachtet wird, pulsiert nach und nach
				3. Längster Pfad pulsiert kurz

	- Einfache Rotation (sowohl links als auch rechts)
		- input: Node zuRotierenderKnoten (dieser und der Elternknoten werden genutzt)
		- output: - / Boolean
		- Weiteres:
			- Ist nicht atomar. Kann man nur sinnvoll bei binären Bäumen machen? Kann man mit hinzufügen und löschen darstellen.
		- Visualisierung:
			Zuerst wird der obere Knoten an die richtige Stelle verschoben, dann geht der Teilbaum, der noch am unteren Knoten hängt, zum verschobenen Knoten und letztlich rückt der zuerst untere Knoten nach

	- Teilbaum "verschieben" - Kann durch löschen und hinzufügen dargestellt werden
	- Einzelnes Element löschen
		- Weiteres:
			- So oft rotieren bis der zu löschende Knoten ein Blatt ist und dann (Teilbaum) löschen. Mit Get Tiefe kann man vor jeder Rotation prüfen ob links oder rechts besser ist -> nicht sauber effizient machbar?

	

Auf Knoten:
	- Ist Blatt
	- Hat Kind
	- Get Kindknoten (links, rechts, ggf mehr)
	- Get Elternknoten
	- Get Grad
