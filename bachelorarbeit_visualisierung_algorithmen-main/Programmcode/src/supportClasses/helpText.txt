REQUIREMENTS FOR THE ALGORITHM FILE:

            - Algorithms needs to be saved in a Java-file. Save it inside a file with the ending .java (e.g. exampleAlgorithm.java)
            - Store the files inside the folder "Algorithms"
              The relative path of the folder is */Programmcode/src/Algorithms (* is the folder the program is stored in)
            - The algorithm file needs some package and imports at the beginning of it to fully function.
              Copy and past the following to the header of the file:

                package Algorithms;
                import abstractAlgorithm.AbstractAlgorithm;
                import datastructures.*;
                import supportClasses.types;

            - The algorithm function is wrapped inside a class which inherits from the "AbstractAlgorithm" class.
              Inside it the function executeAlgorithm needs to be overridden. Therefore, copy and past the following as well:

                public class ArrayAlgorithm extends AbstractAlgorithm {
                        @Override
                        public void executeAlgorithm() throws InterruptedException {

                    }
                }

            - the preparation is now finished, and you can start to write the functions inside the executeAlgorithm function.

DATASTRUCTURES :

            The following datastructures are wrapped inside the program and are free to use.
            Remember only to use the prepared datastructures of the program and not the ones from java.
            In other case the visualization of different datastructures will NOT be visualized.
            Whenever the types-type is requested it needs to be one of the following enum types:

            - "types.BOOLEAN" for a boolean type
            - "types.NUMBER" for a number type
            - "types.STRING" for a string/text type


VARIABLE :

            - create _Variable(types type) :
                    Parameter : types-type (see datastructures)
                    Return : Variable-Object
                    Description : Created with the direct function call in your algorithm class: Variable var = create_Variable(type);
                                it will return an Object of the Variable type. Therefor save it in a corresponding named object.

            Hint : The rest of the functions are called from the variable itself. E.g. a variable called var and a function f is called by var.f;

            - getVariableType() :
                    Parameter:
                    Return: types-type (see datastructures)
                    Description : Returns the enum types, which represents the variable type it is cast at the construction

            - getValue() :
                    Parameter :
                    Return : value of type Object
                    Description : Returns the object value of its variable. Type of the value is always an object, but can be cast to a value type but regular Java type conversion.

            - setValue(Object value) :
                    Parameter :
                            value : new value in the same type as the variable it is executed on
                    Return :
                    Description : Sets a new value to the called variable

            - deleteVariable():
                    Parameter :
                    Return :
                    Description : Deletes the variable and its value

ARRAY :

            - create _Array(types type, int length) :
                    Parameter :
                            type : types-type (see datastructures)
                            length : positive integer, which represent the length of the array
                    Return : Array-Object
                    Description : created with the direct function call in your algorithm class: Array array = create_Array(type, length);
                                it will return an Object of the Array type. Therefor save it in a corresponding named object.

            - create _ArrayWithValues(types type, int length, Object[] values) :
                    Parameter :
                            type : types-type (see datastructures)
                            length : positive integer, which represent the length of the array
                            values : an Object list with initial values for the array (see Java List)
                    Return : Array-Object with initial values
                    Description : created with the direct function call in your algorithm class: Array array = create_Array(type, length, values);
                                it will return an Object of the Array type. Therefor save it in a corresponding named object.

            Hint : The rest of the functions are called from the array itself. E.g. an array called array and a function f is called by array.f;

            - insertElement(int index, Object value) :
                    Parameter :
                            index : positive integer, which represents the index position of the accessed array element
                            value : value of type Object which is inserted to the array
                    Return :
                    Description : Inserts the new 'value' to the array at position 'index'.

            - insertElementAtStart(Object value) :
                    Parameter :
                            value : value of type Object which is inserted to the array
                    Return :
                    Description : Inserts the new 'value' Object to the beginning of the array. New position of the 'value' is always 0.

            - insertElementAtEnd(Object value) :
                    Parameter :
                            value : value of type Object which is inserted to the array
                    Return :
                    Description : Inserts the new 'value' Object to the end of the array.
                                  New position of the 'value' is always array.getSize() (see function getSize()).

            - deleteElementByIndex(int index) :
                    Parameter :
                            index : positive integer, which represents the index position of the accessed array element
                    Return :
                    Description : Deletes the Element of the 'index' position. All Elements will be set one position forward.

            - deleteArray() :
                    Parameter :
                    Return :
                    Description : Deletes alle Elements of the array.

            - swapElements(int index1, int index2) :
                    Parameter :
                            index1 : positive integer, which represents the index position of the first accessed array element
                            index2 : positive integer, which represents the index position of the second accessed array element
                    Return :
                    Description : Changes the values of the array elements with index 'index1' and 'index2'.

            - setElement(int index, Object value) :
                    Parameter :
                            index : positive integer, which represents the index position of the accessed array element
                            value : value of type Object, which represents the new value the element is set to
                    Return :
                    Description : Sets the array element of the index position with the new value of 'value'.
                                Tests if the parameter 'value' has the same type as the array. If not it will fail.

            - getValueByIndex(int index) :
                    Parameter :
                            index : positive integer, which represents the index position of the accessed array element
                    Return : value of the array element at index 'index' in Object-Type
                    Description : Returns the value of the array element at the index position.

            - getIndexByValue(Object value) :
                    Parameter :
                            value : value of type Object
                    Return : index position as a positive integer of type int
                    Description : Returns the positive integer of the element of the array if it exists.
                                  If the Array contains duplicates it will always return the first element of it.

            - getSize() :
                    Parameter :
                    Return : length of the array as a positive integer of type int
                    Description : Returns the size/length of the array as a positive integer.


LIST :

            All lists consists elements of the Variable-type of this program (see Variable).
            Create a new Variable and add it to the list. Hint:
            Set the Variable in the first place and THEN add it to the list, even if it is a dummy value.
            Needless you can change it afterwards.

            - create _List() :
                    Parameter :
                    Return : List-Object
                    Description : created with the direct function call in your algorithm class: List list = create_List();
                                  it will return an Object of the List type. Therefor save it in a corresponding named object.

            Hint : The rest of the functions are called from the array itself. E.g. a list called list and a function f is called by list.f;

            - insertElement(Variable variable, int index) :
                Parameter :
                        variable : The Variable, which should be added to the list
                        index : positive integer, which represents the index position the new 'variable'
                Return :
                Description : Inserts the new 'variable' to the list at position 'index'.

            - insertElementAtStart(Variable variable) :
                Parameter :
                Return :
                Description : Inserts the new 'variable' to the beginning of the list.

            - insertElementAtEnd(Variable variable) :
                Parameter :
                Return :
                Description : Inserts the new 'variable' to the end of the list.

            - deleteElement(Variable variable) :
                Parameter :
                Return :
                Description : Deletes the 'variable' element of the list.

            - deleteElementByIndex(int index) :
                Parameter :
                        index : positive integer, which represents the index position of the accessed list element
                Return :
                Description : Deletes the list element of the position 'index'.

            - deleteElementByValue(Object value) :
                Parameter :
                        value : the Object-type value of the list element, which should be deleted
                Return :
                Description : Deletes the list element with the value 'value'.
                              If the list contains duplicates it will always remove the first one.

            - deleteList() :
                Parameter :
                Return :
                Description : Deletes all elements of the list.

            - setElement(Variable variable, object value) :
                Parameter :
                        variable : Variable element of the list, which should be changed
                        value : Object-type value of the new value for the Variable element of the list.
                Return :
                Description : Sets the Variable 'variable' to the new value 'value'.
                              Tests if the Variable and the 'value' has the same type. If not it fails.

            - getElementByValue(Object value) :
                Parameter :
                        value : Object-type value of the searched list element
                Return :
                Description : Returns the Variable-type Object (see Variable) of the searched value 'value'.
                              If the list doesn't contain 'value', it will return null.

            - getIndexByElement(Variable variable) :
                Parameter :
                        variable : searched list element of type Variable (see Variable)
                Return :
                Description : Returns the positive integer 'index' of the given Variable 'variable'.

            - getElementByIndex(int index) :
                Parameter :
                        index : positive integer, which represents the index position of the accessed list element
                Return :
                Description : Returns the Variable-type (see Variable) of the list position 'index'.

            - getSize() :
                Parameter :
                Return : length of the list as a positive integer as type int.
                Description : Returns the size/length of the list as a positive integer.
